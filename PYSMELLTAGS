{'CLASSES': {'apns.APNs': {'bases': ['object'],
                           'constructor': ['use_sandbox=False',
                                           'cert_file=None',
                                           'key_file=None',
                                           'enhanced=False'],
                           'docstring': 'A class representing an Apple Push Notification service connection',
                           'methods': [('packed_uchar',
                                        [],
                                        '\n        Returns an unsigned char in packed form\n        '),
                                       ('packed_ushort_big_endian',
                                        [],
                                        '\n        Returns an unsigned short in packed big-endian (network) form\n        '),
                                       ('unpacked_ushort_big_endian',
                                        [],
                                        '\n        Returns an unsigned short from a packed big-endian (network) byte\n        array\n        '),
                                       ('packed_uint_big_endian',
                                        [],
                                        '\n        Returns an unsigned int in packed big-endian (network) form\n        '),
                                       ('unpacked_uint_big_endian',
                                        [],
                                        '\n        Returns an unsigned int from a packed big-endian (network) byte array\n        '),
                                       ('unpacked_char_big_endian',
                                        [],
                                        '\n        Returns an unsigned char from a packed big-endian (network) byte array\n        ')],
                           'properties': ['use_sandbox',
                                          'cert_file',
                                          'key_file',
                                          '_feedback_connection',
                                          '_gateway_connection',
                                          'enhanced',
                                          'feedback_server',
                                          'gateway_server']},
             'apns.APNsConnection': {'bases': ['object'],
                                     'constructor': ['cert_file=None',
                                                     'key_file=None',
                                                     'timeout=None',
                                                     'enhanced=False'],
                                     'docstring': '\n    A generic connection class for communicating with the APNs\n    ',
                                     'methods': [('__del__', [], ''),
                                                 ('_connect', [], ''),
                                                 ('_disconnect', [], ''),
                                                 ('_connection', [], ''),
                                                 ('read', ['n=None'], ''),
                                                 ('write', ['string'], '')],
                                     'properties': ['cert_file',
                                                    'key_file',
                                                    'timeout',
                                                    '_socket',
                                                    '_ssl',
                                                    'enhanced',
                                                    'connection_alive',
                                                    '_last_activity_time']},
             'apns.FeedbackConnection': {'bases': ['apns.APNsConnection'],
                                         'constructor': ['use_sandbox=False', '**kwargs'],
                                         'docstring': '\n    A class representing a connection to the APNs Feedback server\n    ',
                                         'methods': [('_chunks', [], ''),
                                                     ('items',
                                                      [],
                                                      '\n        A generator that yields (token_hex, fail_time) pairs retrieved from\n        the APNs feedback server\n        ')],
                                         'properties': ['server', 'port']},
             'apns.Frame': {'bases': ['object'],
                            'constructor': [],
                            'docstring': 'A class representing an APNs message frame for multiple sending',
                            'methods': [('get_frame', [], ''),
                                        ('add_item',
                                         ['token_hex',
                                          'payload',
                                          'identifier',
                                          'expiry',
                                          'priority'],
                                         'Add a notification message to the frame'),
                                        ('get_notifications', ['gateway_connection'], ''),
                                        ('__str__', [], 'Get the frame buffer')],
                            'properties': ['frame_data', 'notification_data']},
             'apns.GatewayConnection': {'bases': ['apns.APNsConnection'],
                                        'constructor': ['use_sandbox=False', '**kwargs'],
                                        'docstring': '\n    A class that represents a connection to the APNs gateway server\n    ',
                                        'methods': [('_init_error_response_handler_worker',
                                                     [],
                                                     ''),
                                                    ('_get_notification',
                                                     ['token_hex', 'payload'],
                                                     '\n        Takes a token as a hex string and a payload as a Python dict and sends\n        the notification\n        '),
                                                    ('_get_enhanced_notification',
                                                     ['token_hex',
                                                      'payload',
                                                      'identifier',
                                                      'expiry'],
                                                     '\n        form notification data in an enhanced format\n        '),
                                                    ('send_notification',
                                                     ['token_hex',
                                                      'payload',
                                                      'identifier=0',
                                                      'expiry=0'],
                                                     '\n        in enhanced mode, send_notification may return error response from APNs if any\n        '),
                                                    ('_make_sure_error_response_handler_worker_alive',
                                                     [],
                                                     ''),
                                                    ('send_notification_multiple',
                                                     ['frame'],
                                                     ''),
                                                    ('register_response_listener',
                                                     ['response_listener'],
                                                     ''),
                                                    ('force_close', [], ''),
                                                    ('_is_idle_timeout', [], '')],
                                        'properties': ['server',
                                                       'port',
                                                       '_last_activity_time',
                                                       '_send_lock',
                                                       '_error_response_handler_worker',
                                                       '_response_listener',
                                                       '_sent_notifications']},
             'apns.Payload': {'bases': ['object'],
                              'constructor': ['alert=None',
                                              'badge=None',
                                              'sound=None',
                                              'category=None',
                                              'custom={}',
                                              'content_available=False'],
                              'docstring': 'A class representing an APNs message payload',
                              'methods': [('dict',
                                           [],
                                           'Returns the payload as a regular Python dictionary'),
                                          ('json', [], ''),
                                          ('_check_size', [], ''),
                                          ('__repr__', [], '')],
                              'properties': ['alert',
                                             'badge',
                                             'sound',
                                             'category',
                                             'custom',
                                             'content_available']},
             'apns.PayloadAlert': {'bases': ['object'],
                                   'constructor': ['body=None',
                                                   'action_loc_key=None',
                                                   'loc_key=None',
                                                   'loc_args=None',
                                                   'launch_image=None'],
                                   'docstring': '',
                                   'methods': [('dict', [], '')],
                                   'properties': ['body',
                                                  'action_loc_key',
                                                  'loc_key',
                                                  'loc_args',
                                                  'launch_image']},
             'apns.PayloadTooLargeError': {'bases': ['Exception'],
                                           'constructor': ['payload_size'],
                                           'docstring': '',
                                           'methods': [],
                                           'properties': ['payload_size']},
             'apns.Util': {'bases': ['object'],
                           'constructor': [],
                           'docstring': '',
                           'methods': [('getListIndexFromID', ['the_list', 'identifier'], ''),
                                       ('convert_error_response_to_dict',
                                        ['error_response_tuple'],
                                        '')],
                           'properties': []},
             'bs4.BeautifulSoup': {'bases': ['element.Tag'],
                                   'constructor': ["markup=''",
                                                   'features=None',
                                                   'builder=None',
                                                   'parse_only=None',
                                                   'from_encoding=None',
                                                   'exclude_encodings=None',
                                                   '**kwargs'],
                                   'docstring': '\n    This class defines the basic interface called by the tree builders.\n\n    These methods will be called by the parser:\n      reset()\n      feed(markup)\n\n    The tree builder may call these methods from its feed() implementation:\n      handle_starttag(name, attrs) # See note about return value\n      handle_endtag(name)\n      handle_data(data) # Appends to the current data node\n      endData(containerClass=NavigableString) # Ends the current data node\n\n    No matter how complicated the underlying parser is, you should be\n    able to build a tree using \'start tag\' events, \'end tag\' events,\n    \'data\' events, and "done with data" events.\n\n    If you encounter an empty-element tag (aka a self-closing tag,\n    like HTML\'s <br> tag), call handle_starttag and then\n    handle_endtag.\n    ',
                                   'methods': [('__copy__', [], ''),
                                               ('__getstate__', [], ''),
                                               ('_feed', [], ''),
                                               ('reset', [], ''),
                                               ('new_tag',
                                                ['name',
                                                 'namespace=None',
                                                 'nsprefix=None',
                                                 '**attrs'],
                                                'Create a new tag associated with this soup.'),
                                               ('new_string',
                                                ['s', 'subclass=NavigableString'],
                                                'Create a new NavigableString associated with this soup.'),
                                               ('insert_before', ['successor'], ''),
                                               ('insert_after', ['successor'], ''),
                                               ('popTag', [], ''),
                                               ('pushTag', ['tag'], ''),
                                               ('endData',
                                                ['containerClass=NavigableString'],
                                                ''),
                                               ('object_was_parsed',
                                                ['o',
                                                 'parent=None',
                                                 'most_recent_element=None'],
                                                'Add an object to the parse tree.'),
                                               ('_popToTag',
                                                ['name', 'nsprefix=None', 'inclusivePop=True'],
                                                'Pops the tag stack up to and including the most recent\n        instance of the given tag. If inclusivePop is false, pops the tag\n        stack up to but *not* including the most recent instqance of\n        the given tag.'),
                                               ('handle_starttag',
                                                ['name', 'namespace', 'nsprefix', 'attrs'],
                                                "Push a start tag on to the stack.\n\n        If this method returns None, the tag was rejected by the\n        SoupStrainer. You should proceed as if the tag had not occured\n        in the document. For instance, if this was a self-closing tag,\n        don't call handle_endtag.\n        "),
                                               ('handle_endtag', ['name', 'nsprefix=None'], ''),
                                               ('handle_data', ['data'], ''),
                                               ('decode',
                                                ['pretty_print=False',
                                                 'eventual_encoding=DEFAULT_OUTPUT_ENCODING',
                                                 "formatter='minimal'"],
                                                'Returns a string or Unicode representation of this document.\n        To get Unicode, pass None for encoding.')],
                                   'properties': ['ROOT_TAG_NAME',
                                                  'DEFAULT_BUILDER_FEATURES',
                                                  'ASCII_SPACES',
                                                  'NO_PARSER_SPECIFIED_WARNING',
                                                  'builder',
                                                  'is_xml',
                                                  'parse_only',
                                                  'markup',
                                                  'original_encoding',
                                                  'declared_html_encoding',
                                                  'contains_replacement_characters',
                                                  'hidden',
                                                  'current_data',
                                                  'currentTag',
                                                  'tagStack',
                                                  'preserve_whitespace_tag_stack',
                                                  '_most_recent_element']},
             'bs4.BeautifulStoneSoup': {'bases': ['bs4.BeautifulSoup'],
                                        'constructor': ['*args', '**kwargs'],
                                        'docstring': 'Deprecated interface to an XML parser.',
                                        'methods': [],
                                        'properties': []},
             'bs4.FeatureNotFound': {'bases': ['ValueError'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [],
                                     'properties': []},
             'bs4.StopParsing': {'bases': ['Exception'],
                                 'constructor': [],
                                 'docstring': '',
                                 'methods': [],
                                 'properties': []},
             'bs4.builder.HTMLTreeBuilder': {'bases': ['bs4.builder.TreeBuilder'],
                                             'constructor': [],
                                             'docstring': 'This TreeBuilder knows facts about HTML.\n\n    Such as which tags are empty-element tags.\n    ',
                                             'methods': [('set_up_substitutions', ['tag'], '')],
                                             'properties': ['preserve_whitespace_tags',
                                                            'empty_element_tags',
                                                            'cdata_list_attributes']},
             'bs4.builder.ParserRejectedMarkup': {'bases': ['Exception'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'bs4.builder.SAXTreeBuilder': {'bases': ['bs4.builder.TreeBuilder'],
                                            'constructor': [],
                                            'docstring': 'A Beautiful Soup treebuilder that listens for SAX events.',
                                            'methods': [('feed', ['markup'], ''),
                                                        ('close', [], ''),
                                                        ('startElement', ['name', 'attrs'], ''),
                                                        ('endElement', ['name'], ''),
                                                        ('startElementNS',
                                                         ['nsTuple', 'nodeName', 'attrs'],
                                                         ''),
                                                        ('endElementNS',
                                                         ['nsTuple', 'nodeName'],
                                                         ''),
                                                        ('startPrefixMapping',
                                                         ['prefix', 'nodeValue'],
                                                         ''),
                                                        ('endPrefixMapping', ['prefix'], ''),
                                                        ('characters', ['content'], ''),
                                                        ('startDocument', [], ''),
                                                        ('endDocument', [], '')],
                                            'properties': []},
             'bs4.builder.TreeBuilder': {'bases': ['object'],
                                         'constructor': [],
                                         'docstring': 'Turn a document into a Beautiful Soup object tree.',
                                         'methods': [('reset', [], ''),
                                                     ('can_be_empty_element',
                                                      ['tag_name'],
                                                      'Might a tag with this name be an empty-element tag?\n\n        The final markup may or may not actually present this tag as\n        self-closing.\n\n        For instance: an HTMLBuilder does not consider a <p> tag to be\n        an empty-element tag (it\'s not in\n        HTMLBuilder.empty_element_tags). This means an empty <p> tag\n        will be presented as "<p></p>", not "<p />".\n\n        The default implementation has no opinion about which tags are\n        empty-element tags, so a tag will be presented as an\n        empty-element tag if and only if it has no contents.\n        "<foo></foo>" will become "<foo />", and "<foo>bar</foo>" will\n        be left alone.\n        '),
                                                     ('feed', ['markup'], ''),
                                                     ('prepare_markup',
                                                      ['markup',
                                                       'user_specified_encoding=None',
                                                       'document_declared_encoding=None'],
                                                      ''),
                                                     ('test_fragment_to_document',
                                                      ['fragment'],
                                                      "Wrap an HTML fragment to make it look like a document.\n\n        Different parsers do this differently. For instance, lxml\n        introduces an empty <head> tag, and html5lib\n        doesn't. Abstracting this away lets us write simple tests\n        which run HTML fragments through the parser and compare the\n        results against other HTML fragments.\n\n        This method should not be used outside of tests.\n        "),
                                                     ('set_up_substitutions', ['tag'], ''),
                                                     ('_replace_cdata_list_attribute_values',
                                                      ['tag_name', 'attrs'],
                                                      'Replaces class="foo bar" with class=["foo", "bar"]\n\n        Modifies its input in place.\n        ')],
                                         'properties': ['NAME',
                                                        'ALTERNATE_NAMES',
                                                        'features',
                                                        'is_xml',
                                                        'picklable',
                                                        'preserve_whitespace_tags',
                                                        'empty_element_tags',
                                                        'cdata_list_attributes',
                                                        'soup']},
             'bs4.builder.TreeBuilderRegistry': {'bases': ['object'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('register',
                                                              ['treebuilder_class'],
                                                              'Register a treebuilder based on its advertised features.'),
                                                             ('lookup', ['*features'], '')],
                                                 'properties': ['builders_for_feature',
                                                                'builders']},
             'bs4.builder._html5lib.AttrList': {'bases': ['object'],
                                                'constructor': ['element'],
                                                'docstring': '',
                                                'methods': [('__iter__', [], ''),
                                                            ('__setitem__',
                                                             ['name', 'value'],
                                                             ''),
                                                            ('items', [], ''),
                                                            ('keys', [], ''),
                                                            ('__len__', [], ''),
                                                            ('__getitem__', ['name'], ''),
                                                            ('__contains__', ['name'], '')],
                                                'properties': ['element', 'attrs']},
             'bs4.builder._html5lib.Element': {'bases': ['html5lib.treebuilders._base.Node'],
                                               'constructor': ['element', 'soup', 'namespace'],
                                               'docstring': '',
                                               'methods': [('appendChild', ['node'], ''),
                                                           ('getAttributes', [], ''),
                                                           ('setAttributes',
                                                            ['attributes'],
                                                            ''),
                                                           ('insertText',
                                                            ['data', 'insertBefore=None'],
                                                            ''),
                                                           ('insertBefore',
                                                            ['node', 'refNode'],
                                                            ''),
                                                           ('removeChild', ['node'], ''),
                                                           ('reparentChildren',
                                                            ['new_parent'],
                                                            "Move all of this tag's children into another tag."),
                                                           ('cloneNode', [], ''),
                                                           ('hasContent', [], ''),
                                                           ('getNameTuple', [], '')],
                                               'properties': ['element',
                                                              'soup',
                                                              'namespace',
                                                              'attributes',
                                                              'nameTuple']},
             'bs4.builder._html5lib.HTML5TreeBuilder': {'bases': ['bs4.builder.HTMLTreeBuilder'],
                                                        'constructor': [],
                                                        'docstring': 'Use html5lib to build a tree.',
                                                        'methods': [('prepare_markup',
                                                                     ['markup',
                                                                      'user_specified_encoding',
                                                                      'document_declared_encoding=None',
                                                                      'exclude_encodings=None'],
                                                                     ''),
                                                                    ('feed', ['markup'], ''),
                                                                    ('create_treebuilder',
                                                                     ['namespaceHTMLElements'],
                                                                     ''),
                                                                    ('test_fragment_to_document',
                                                                     ['fragment'],
                                                                     'See `TreeBuilder`.')],
                                                        'properties': ['NAME',
                                                                       'features',
                                                                       'user_specified_encoding',
                                                                       'underlying_builder']},
             'bs4.builder._html5lib.TextNode': {'bases': ['bs4.builder._html5lib.Element'],
                                                'constructor': ['element', 'soup'],
                                                'docstring': '',
                                                'methods': [('cloneNode', [], '')],
                                                'properties': ['element', 'soup']},
             'bs4.builder._html5lib.TreeBuilderForHtml5lib': {'bases': ['html5lib.treebuilders._base.TreeBuilder'],
                                                              'constructor': ['soup',
                                                                              'namespaceHTMLElements'],
                                                              'docstring': '',
                                                              'methods': [('documentClass',
                                                                           [],
                                                                           ''),
                                                                          ('insertDoctype',
                                                                           ['token'],
                                                                           ''),
                                                                          ('elementClass',
                                                                           ['name',
                                                                            'namespace'],
                                                                           ''),
                                                                          ('commentClass',
                                                                           ['data'],
                                                                           ''),
                                                                          ('fragmentClass',
                                                                           [],
                                                                           ''),
                                                                          ('appendChild',
                                                                           ['node'],
                                                                           ''),
                                                                          ('getDocument',
                                                                           [],
                                                                           ''),
                                                                          ('getFragment',
                                                                           [],
                                                                           '')],
                                                              'properties': ['soup']},
             'bs4.builder._htmlparser.BeautifulSoupHTMLParser': {'bases': ['HTMLParser.HTMLParser'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('handle_starttag',
                                                                              ['name',
                                                                               'attrs'],
                                                                              ''),
                                                                             ('handle_endtag',
                                                                              ['name'],
                                                                              ''),
                                                                             ('handle_data',
                                                                              ['data'],
                                                                              ''),
                                                                             ('handle_charref',
                                                                              ['name'],
                                                                              ''),
                                                                             ('handle_entityref',
                                                                              ['name'],
                                                                              ''),
                                                                             ('handle_comment',
                                                                              ['data'],
                                                                              ''),
                                                                             ('handle_decl',
                                                                              ['data'],
                                                                              ''),
                                                                             ('unknown_decl',
                                                                              ['data'],
                                                                              ''),
                                                                             ('handle_pi',
                                                                              ['data'],
                                                                              '')],
                                                                 'properties': []},
             'bs4.builder._htmlparser.HTMLParseError': {'bases': ['Exception'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': []},
             'bs4.builder._htmlparser.HTMLParserTreeBuilder': {'bases': ['bs4.builder.HTMLTreeBuilder'],
                                                               'constructor': ['*args',
                                                                               '**kwargs'],
                                                               'docstring': '',
                                                               'methods': [('prepare_markup',
                                                                            ['markup',
                                                                             'user_specified_encoding=None',
                                                                             'document_declared_encoding=None',
                                                                             'exclude_encodings=None'],
                                                                            '\n        :return: A 4-tuple (markup, original encoding, encoding\n        declared within markup, whether any characters had to be\n        replaced with REPLACEMENT CHARACTER).\n        '),
                                                                           ('feed',
                                                                            ['markup'],
                                                                            '')],
                                                               'properties': ['is_xml',
                                                                              'picklable',
                                                                              'NAME',
                                                                              'features',
                                                                              'parser_args']},
             'bs4.builder._lxml.LXMLTreeBuilder': {'bases': ['bs4.builder.HTMLTreeBuilder',
                                                             'bs4.builder._lxml.LXMLTreeBuilderForXML'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('default_parser',
                                                                ['encoding'],
                                                                ''),
                                                               ('feed', ['markup'], ''),
                                                               ('test_fragment_to_document',
                                                                ['fragment'],
                                                                'See `TreeBuilder`.')],
                                                   'properties': ['NAME',
                                                                  'ALTERNATE_NAMES',
                                                                  'features',
                                                                  'is_xml',
                                                                  'parser']},
             'bs4.builder._lxml.LXMLTreeBuilderForXML': {'bases': ['bs4.builder.TreeBuilder'],
                                                         'constructor': ['parser=None',
                                                                         'empty_element_tags=None'],
                                                         'docstring': '',
                                                         'methods': [('default_parser',
                                                                      ['encoding'],
                                                                      ''),
                                                                     ('parser_for',
                                                                      ['encoding'],
                                                                      ''),
                                                                     ('_getNsTag', ['tag'], ''),
                                                                     ('prepare_markup',
                                                                      ['markup',
                                                                       'user_specified_encoding=None',
                                                                       'exclude_encodings=None',
                                                                       'document_declared_encoding=None'],
                                                                      '\n        :yield: A series of 4-tuples.\n         (markup, encoding, declared encoding,\n          has undergone character replacement)\n\n        Each 4-tuple represents a strategy for parsing the document.\n        '),
                                                                     ('feed', ['markup'], ''),
                                                                     ('close', [], ''),
                                                                     ('start',
                                                                      ['name',
                                                                       'attrs',
                                                                       'nsmap={}'],
                                                                      ''),
                                                                     ('_prefix_for_namespace',
                                                                      ['namespace'],
                                                                      'Find the currently active prefix for the given namespace.'),
                                                                     ('end', ['name'], ''),
                                                                     ('pi',
                                                                      ['target', 'data'],
                                                                      ''),
                                                                     ('data', ['content'], ''),
                                                                     ('doctype',
                                                                      ['name',
                                                                       'pubid',
                                                                       'system'],
                                                                      ''),
                                                                     ('comment',
                                                                      ['content'],
                                                                      'Handle comments as Comment objects.'),
                                                                     ('test_fragment_to_document',
                                                                      ['fragment'],
                                                                      'See `TreeBuilder`.')],
                                                         'properties': ['DEFAULT_PARSER_CLASS',
                                                                        'is_xml',
                                                                        'NAME',
                                                                        'ALTERNATE_NAMES',
                                                                        'features',
                                                                        'CHUNK_SIZE',
                                                                        'DEFAULT_NSMAPS',
                                                                        '_default_parser',
                                                                        'empty_element_tags',
                                                                        'soup',
                                                                        'nsmaps',
                                                                        'parser']},
             'bs4.dammit.EncodingDetector': {'bases': [],
                                             'constructor': ['markup',
                                                             'override_encodings=None',
                                                             'is_html=False',
                                                             'exclude_encodings=None'],
                                             'docstring': 'Suggests a number of possible encodings for a bytestring.\n\n    Order of precedence:\n\n    1. Encodings you specifically tell EncodingDetector to try first\n    (the override_encodings argument to the constructor).\n\n    2. An encoding declared within the bytestring itself, either in an\n    XML declaration (if the bytestring is to be interpreted as an XML\n    document), or in a <meta> tag (if the bytestring is to be\n    interpreted as an HTML document.)\n\n    3. An encoding detected through textual analysis by chardet,\n    cchardet, or a similar external library.\n\n    4. UTF-8.\n\n    5. Windows-1252.\n    ',
                                             'methods': [('_usable', ['encoding', 'tried'], ''),
                                                         ('strip_byte_order_mark',
                                                          ['data'],
                                                          'If a byte-order mark is present, strip it and return the encoding it implies.'),
                                                         ('find_declared_encoding',
                                                          ['markup',
                                                           'is_html=False',
                                                           'search_entire_document=False'],
                                                          'Given a document, tries to find its declared encoding.\n\n        An XML encoding is declared at the beginning of the document.\n\n        An HTML encoding is declared in a <meta> tag, hopefully near the\n        beginning of the document.\n        ')],
                                             'properties': ['override_encodings',
                                                            'exclude_encodings',
                                                            'chardet_encoding',
                                                            'is_html',
                                                            'declared_encoding',
                                                            'markup',
                                                            'sniffed_encoding',
                                                            'encodings']},
             'bs4.dammit.EntitySubstitution': {'bases': ['object'],
                                               'constructor': [],
                                               'docstring': 'Substitute XML or HTML entities for the corresponding characters.',
                                               'methods': [('_populate_class_variables',
                                                            [],
                                                            ''),
                                                           ('_substitute_html_entity',
                                                            ['matchobj'],
                                                            ''),
                                                           ('_substitute_xml_entity',
                                                            ['matchobj'],
                                                            'Used with a regular expression to substitute the\n        appropriate XML entity for an XML special character.'),
                                                           ('quoted_attribute_value',
                                                            ['value'],
                                                            'Make a value into a quoted XML attribute, possibly escaping it.\n\n         Most strings will be quoted using double quotes.\n\n          Bob\'s Bar -> "Bob\'s Bar"\n\n         If a string contains double quotes, it will be quoted using\n         single quotes.\n\n          Welcome to "my bar" -> \'Welcome to "my bar"\'\n\n         If a string contains both single and double quotes, the\n         double quotes will be escaped, and the string will be quoted\n         using double quotes.\n\n          Welcome to "Bob\'s Bar" -> "Welcome to &quot;Bob\'s bar&quot;\n        '),
                                                           ('substitute_xml',
                                                            ['value',
                                                             'make_quoted_attribute=False'],
                                                            'Substitute XML entities for special XML characters.\n\n        :param value: A string to be substituted. The less-than sign\n          will become &lt;, the greater-than sign will become &gt;,\n          and any ampersands will become &amp;. If you want ampersands\n          that appear to be part of an entity definition to be left\n          alone, use substitute_xml_containing_entities() instead.\n\n        :param make_quoted_attribute: If True, then the string will be\n         quoted, as befits an attribute value.\n        '),
                                                           ('substitute_xml_containing_entities',
                                                            ['value',
                                                             'make_quoted_attribute=False'],
                                                            'Substitute XML entities for special XML characters.\n\n        :param value: A string to be substituted. The less-than sign will\n          become &lt;, the greater-than sign will become &gt;, and any\n          ampersands that are not part of an entity defition will\n          become &amp;.\n\n        :param make_quoted_attribute: If True, then the string will be\n         quoted, as befits an attribute value.\n        '),
                                                           ('substitute_html',
                                                            ['s'],
                                                            'Replace certain Unicode characters with named HTML entities.\n\n        This differs from data.encode(encoding, \'xmlcharrefreplace\')\n        in that the goal is to make the result more readable (to those\n        with ASCII displays) rather than to recover from\n        errors. There\'s absolutely nothing wrong with a UTF-8 string\n        containg a LATIN SMALL LETTER E WITH ACUTE, but replacing that\n        character with "&eacute;" will make it more readable to some\n        people.\n        ')],
                                               'properties': ['CHARACTER_TO_HTML_ENTITY',
                                                              'HTML_ENTITY_TO_CHARACTER',
                                                              'CHARACTER_TO_HTML_ENTITY_RE',
                                                              'CHARACTER_TO_XML_ENTITY',
                                                              'BARE_AMPERSAND_OR_BRACKET',
                                                              'AMPERSAND_OR_BRACKET']},
             'bs4.dammit.UnicodeDammit': {'bases': [],
                                          'constructor': ['markup',
                                                          'override_encodings=[]',
                                                          'smart_quotes_to=None',
                                                          'is_html=False',
                                                          'exclude_encodings=[]'],
                                          'docstring': 'A class for detecting the encoding of a *ML document and\n    converting it to a Unicode string. If the source encoding is\n    windows-1252, can replace MS smart quotes with their HTML or XML\n    equivalents.',
                                          'methods': [('_sub_ms_char',
                                                       ['match'],
                                                       'Changes a MS smart quote character to an XML or HTML\n        entity, or an ASCII character.'),
                                                      ('_convert_from',
                                                       ['proposed', "errors='strict'"],
                                                       ''),
                                                      ('_to_unicode',
                                                       ['data', 'encoding', "errors='strict'"],
                                                       'Given a string and its encoding, decodes the string into Unicode.\n        %encoding is a string recognized by encodings.aliases'),
                                                      ('find_codec', ['charset'], ''),
                                                      ('_codec', ['charset'], ''),
                                                      ('detwingle',
                                                       ['in_bytes',
                                                        "main_encoding='utf8'",
                                                        "embedded_encoding='windows-1252'"],
                                                       "Fix characters from one encoding embedded in some other encoding.\n\n        Currently the only situation supported is Windows-1252 (or its\n        subset ISO-8859-1), embedded in UTF-8.\n\n        The input must be a bytestring. If you've already converted\n        the document to Unicode, you're too late.\n\n        The output is a bytestring in which `embedded_encoding`\n        characters have been converted to their `main_encoding`\n        equivalents.\n        ")],
                                          'properties': ['CHARSET_ALIASES',
                                                         'ENCODINGS_WITH_SMART_QUOTES',
                                                         'smart_quotes_to',
                                                         'tried_encodings',
                                                         'contains_replacement_characters',
                                                         'is_html',
                                                         'detector',
                                                         'markup',
                                                         'unicode_markup',
                                                         'original_encoding',
                                                         'declared_html_encoding',
                                                         'MS_CHARS',
                                                         'MS_CHARS_TO_ASCII',
                                                         'WINDOWS_1252_TO_UTF8',
                                                         'MULTIBYTE_MARKERS_AND_SIZES',
                                                         'FIRST_MULTIBYTE_MARKER',
                                                         'LAST_MULTIBYTE_MARKER']},
             'bs4.diagnose.AnnouncingParser': {'bases': ['HTMLParser.HTMLParser'],
                                               'constructor': [],
                                               'docstring': 'Announces HTMLParser parse events, without doing anything else.',
                                               'methods': [('_p', ['s'], ''),
                                                           ('handle_starttag',
                                                            ['name', 'attrs'],
                                                            ''),
                                                           ('handle_endtag', ['name'], ''),
                                                           ('handle_data', ['data'], ''),
                                                           ('handle_charref', ['name'], ''),
                                                           ('handle_entityref', ['name'], ''),
                                                           ('handle_comment', ['data'], ''),
                                                           ('handle_decl', ['data'], ''),
                                                           ('unknown_decl', ['data'], ''),
                                                           ('handle_pi', ['data'], '')],
                                               'properties': []},
             'bs4.element.AttributeValueWithCharsetSubstitution': {'bases': ['unicode'],
                                                                   'constructor': [],
                                                                   'docstring': 'A stand-in object for a character encoding specified in HTML.',
                                                                   'methods': [],
                                                                   'properties': []},
             'bs4.element.CData': {'bases': ['bs4.element.PreformattedString'],
                                   'constructor': [],
                                   'docstring': '',
                                   'methods': [],
                                   'properties': ['PREFIX', 'SUFFIX']},
             'bs4.element.CharsetMetaAttributeValue': {'bases': ['bs4.element.AttributeValueWithCharsetSubstitution'],
                                                       'constructor': [],
                                                       'docstring': 'A generic stand-in for the value of a meta tag\'s \'charset\' attribute.\n\n    When Beautiful Soup parses the markup \'<meta charset="utf8">\', the\n    value of the \'charset\' attribute will be one of these objects.\n    ',
                                                       'methods': [('__new__',
                                                                    ['original_value'],
                                                                    ''),
                                                                   ('encode', ['encoding'], '')],
                                                       'properties': []},
             'bs4.element.Comment': {'bases': ['bs4.element.PreformattedString'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [],
                                     'properties': ['PREFIX', 'SUFFIX']},
             'bs4.element.ContentMetaAttributeValue': {'bases': ['bs4.element.AttributeValueWithCharsetSubstitution'],
                                                       'constructor': [],
                                                       'docstring': 'A generic stand-in for the value of a meta tag\'s \'content\' attribute.\n\n    When Beautiful Soup parses the markup:\n     <meta http-equiv="content-type" content="text/html; charset=utf8">\n\n    The value of the \'content\' attribute will be one of these objects.\n    ',
                                                       'methods': [('__new__',
                                                                    ['original_value'],
                                                                    ''),
                                                                   ('encode', ['encoding'], '')],
                                                       'properties': ['CHARSET_RE']},
             'bs4.element.Declaration': {'bases': ['bs4.element.PreformattedString'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [],
                                         'properties': ['PREFIX', 'SUFFIX']},
             'bs4.element.Doctype': {'bases': ['bs4.element.PreformattedString'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('for_name_and_ids',
                                                  ['name', 'pub_id', 'system_id'],
                                                  '')],
                                     'properties': ['PREFIX', 'SUFFIX']},
             'bs4.element.HTMLAwareEntitySubstitution': {'bases': ['bs4.dammit.EntitySubstitution'],
                                                         'constructor': [],
                                                         'docstring': "Entity substitution rules that are aware of some HTML quirks.\n\n    Specifically, the contents of <script> and <style> tags should not\n    undergo entity substitution.\n\n    Incoming NavigableString objects are checked to see if they're the\n    direct children of a <script> or <style> tag.\n    ",
                                                         'methods': [('_substitute_if_appropriate',
                                                                      ['ns', 'f'],
                                                                      ''),
                                                                     ('substitute_html',
                                                                      ['ns'],
                                                                      ''),
                                                                     ('substitute_xml',
                                                                      ['ns'],
                                                                      '')],
                                                         'properties': ['cdata_containing_tags',
                                                                        'preformatted_tags']},
             'bs4.element.NamespacedAttribute': {'bases': ['unicode'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('__new__',
                                                              ['prefix',
                                                               'name',
                                                               'namespace=None'],
                                                              '')],
                                                 'properties': []},
             'bs4.element.NavigableString': {'bases': ['unicode', 'bs4.element.PageElement'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('__new__',
                                                          ['value'],
                                                          "Create a new NavigableString.\n\n        When unpickling a NavigableString, this method is called with\n        the string in DEFAULT_OUTPUT_ENCODING. That encoding needs to be\n        passed in to the superclass's __new__ or the superclass won't know\n        how to handle non-ASCII characters.\n        "),
                                                         ('__copy__',
                                                          [],
                                                          'A copy of a NavigableString has the same contents and class\n        as the original, but it is not connected to the parse tree.\n        '),
                                                         ('__getnewargs__', [], ''),
                                                         ('__getattr__',
                                                          ['attr'],
                                                          'text.string gives you text. This is for backwards\n        compatibility for Navigable*String, but for CData* it lets you\n        get the string without the CData wrapper.'),
                                                         ('output_ready',
                                                          ["formatter='minimal'"],
                                                          ''),
                                                         ('name', ['name'], '')],
                                             'properties': ['PREFIX', 'SUFFIX', 'name']},
             'bs4.element.PageElement': {'bases': ['object'],
                                         'constructor': [],
                                         'docstring': 'Contains the navigational information for some part of the page\n    (either a tag or a piece of text)',
                                         'methods': [('format_string',
                                                      ['s', "formatter='minimal'"],
                                                      'Format the given string using the given formatter.'),
                                                     ('_formatter_for_name',
                                                      ['name'],
                                                      'Look up a formatter function based on its name and the tree.'),
                                                     ('setup',
                                                      ['parent=None',
                                                       'previous_element=None',
                                                       'next_element=None',
                                                       'previous_sibling=None',
                                                       'next_sibling=None'],
                                                      'Sets up the initial relations between this element and\n        other elements.'),
                                                     ('replace_with', ['replace_with'], ''),
                                                     ('unwrap', [], ''),
                                                     ('wrap', ['wrap_inside'], ''),
                                                     ('extract',
                                                      [],
                                                      'Destructively rips this element out of the tree.'),
                                                     ('_last_descendant',
                                                      ['is_initialized=True',
                                                       'accept_self=True'],
                                                      'Finds the last element beneath this object to be parsed.'),
                                                     ('insert', ['position', 'new_child'], ''),
                                                     ('append',
                                                      ['tag'],
                                                      'Appends the given tag to the contents of this tag.'),
                                                     ('insert_before',
                                                      ['predecessor'],
                                                      'Makes the given element the immediate predecessor of this one.\n\n        The two elements will have the same parent, and the given element\n        will be immediately before this one.\n        '),
                                                     ('insert_after',
                                                      ['successor'],
                                                      'Makes the given element the immediate successor of this one.\n\n        The two elements will have the same parent, and the given element\n        will be immediately after this one.\n        '),
                                                     ('find_next',
                                                      ['name=None',
                                                       'attrs={}',
                                                       'text=None',
                                                       '**kwargs'],
                                                      'Returns the first item that matches the given criteria and\n        appears after this Tag in the document.'),
                                                     ('find_all_next',
                                                      ['name=None',
                                                       'attrs={}',
                                                       'text=None',
                                                       'limit=None',
                                                       '**kwargs'],
                                                      'Returns all items that match the given criteria and appear\n        after this Tag in the document.'),
                                                     ('find_next_sibling',
                                                      ['name=None',
                                                       'attrs={}',
                                                       'text=None',
                                                       '**kwargs'],
                                                      'Returns the closest sibling to this Tag that matches the\n        given criteria and appears after this Tag in the document.'),
                                                     ('find_next_siblings',
                                                      ['name=None',
                                                       'attrs={}',
                                                       'text=None',
                                                       'limit=None',
                                                       '**kwargs'],
                                                      'Returns the siblings of this Tag that match the given\n        criteria and appear after this Tag in the document.'),
                                                     ('find_previous',
                                                      ['name=None',
                                                       'attrs={}',
                                                       'text=None',
                                                       '**kwargs'],
                                                      'Returns the first item that matches the given criteria and\n        appears before this Tag in the document.'),
                                                     ('find_all_previous',
                                                      ['name=None',
                                                       'attrs={}',
                                                       'text=None',
                                                       'limit=None',
                                                       '**kwargs'],
                                                      'Returns all items that match the given criteria and appear\n        before this Tag in the document.'),
                                                     ('find_previous_sibling',
                                                      ['name=None',
                                                       'attrs={}',
                                                       'text=None',
                                                       '**kwargs'],
                                                      'Returns the closest sibling to this Tag that matches the\n        given criteria and appears before this Tag in the document.'),
                                                     ('find_previous_siblings',
                                                      ['name=None',
                                                       'attrs={}',
                                                       'text=None',
                                                       'limit=None',
                                                       '**kwargs'],
                                                      'Returns the siblings of this Tag that match the given\n        criteria and appear before this Tag in the document.'),
                                                     ('find_parent',
                                                      ['name=None', 'attrs={}', '**kwargs'],
                                                      'Returns the closest parent of this Tag that matches the given\n        criteria.'),
                                                     ('find_parents',
                                                      ['name=None',
                                                       'attrs={}',
                                                       'limit=None',
                                                       '**kwargs'],
                                                      'Returns the parents of this Tag that match the given\n        criteria.'),
                                                     ('_find_one',
                                                      ['method',
                                                       'name',
                                                       'attrs',
                                                       'text',
                                                       '**kwargs'],
                                                      ''),
                                                     ('_find_all',
                                                      ['name',
                                                       'attrs',
                                                       'text',
                                                       'limit',
                                                       'generator',
                                                       '**kwargs'],
                                                      'Iterates over a generator looking for things that match.'),
                                                     ('_attr_value_as_string',
                                                      ['value', 'default=None'],
                                                      'Force an attribute value into a string representation.\n\n        A multi-valued attribute will be converted into a\n        space-separated stirng.\n        '),
                                                     ('_tag_name_matches_and',
                                                      ['function', 'tag_name'],
                                                      ''),
                                                     ('_attribute_checker',
                                                      ['operator', 'attribute', "value=''"],
                                                      'Create a function that performs a CSS selector operation.\n\n        Takes an operator, attribute and optional value. Returns a\n        function that will return True for elements that match that\n        combination.\n        '),
                                                     ('nextGenerator', [], ''),
                                                     ('nextSiblingGenerator', [], ''),
                                                     ('previousGenerator', [], ''),
                                                     ('previousSiblingGenerator', [], ''),
                                                     ('parentGenerator', [], '')],
                                         'properties': ['HTML_FORMATTERS',
                                                        'XML_FORMATTERS',
                                                        '_is_xml',
                                                        'parent',
                                                        'previous_element',
                                                        'next_element',
                                                        'next_sibling',
                                                        'previous_sibling',
                                                        'nextSibling',
                                                        'previousSibling',
                                                        'replaceWith',
                                                        'replace_with_children',
                                                        'replaceWithChildren',
                                                        '_lastRecursiveChild',
                                                        'findNext',
                                                        'findAllNext',
                                                        'findNextSibling',
                                                        'findNextSiblings',
                                                        'fetchNextSiblings',
                                                        'findPrevious',
                                                        'findAllPrevious',
                                                        'fetchPrevious',
                                                        'findPreviousSibling',
                                                        'findPreviousSiblings',
                                                        'fetchPreviousSiblings',
                                                        'findParent',
                                                        'findParents',
                                                        'fetchParents',
                                                        'next',
                                                        'previous',
                                                        'next_elements',
                                                        'next_siblings',
                                                        'previous_elements',
                                                        'previous_siblings',
                                                        'parents',
                                                        'tag_name_re',
                                                        'attribselect_re']},
             'bs4.element.PreformattedString': {'bases': ['bs4.element.NavigableString'],
                                                'constructor': [],
                                                'docstring': 'A NavigableString not subject to the normal formatting rules.\n\n    The string will be passed into the formatter (to trigger side effects),\n    but the return value will be ignored.\n    ',
                                                'methods': [('output_ready',
                                                             ["formatter='minimal'"],
                                                             'CData strings are passed into the formatter.\n        But the return value is ignored.')],
                                                'properties': []},
             'bs4.element.ProcessingInstruction': {'bases': ['bs4.element.PreformattedString'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': ['PREFIX', 'SUFFIX']},
             'bs4.element.ResultSet': {'bases': ['list'],
                                       'constructor': ['source', 'result=()'],
                                       'docstring': 'A ResultSet is just a list that keeps track of the SoupStrainer\n    that created it.',
                                       'methods': [],
                                       'properties': ['source']},
             'bs4.element.SoupStrainer': {'bases': ['object'],
                                          'constructor': ['name=None',
                                                          'attrs={}',
                                                          'text=None',
                                                          '**kwargs'],
                                          'docstring': 'Encapsulates a number of ways of matching a markup element (tag or\n    text).',
                                          'methods': [('_normalize_search_value',
                                                       ['value'],
                                                       ''),
                                                      ('__str__', [], ''),
                                                      ('search_tag',
                                                       ['markup_name=None', 'markup_attrs={}'],
                                                       ''),
                                                      ('search', ['markup'], ''),
                                                      ('_matches',
                                                       ['markup', 'match_against'],
                                                       '')],
                                          'properties': ['name', 'attrs', 'text', 'searchTag']},
             'bs4.element.Tag': {'bases': ['bs4.element.PageElement'],
                                 'constructor': ['parser=None',
                                                 'builder=None',
                                                 'name=None',
                                                 'namespace=None',
                                                 'prefix=None',
                                                 'attrs=None',
                                                 'parent=None',
                                                 'previous=None'],
                                 'docstring': 'Represents a found HTML tag with its attributes and contents.',
                                 'methods': [('__copy__',
                                              [],
                                              "A copy of a Tag is a new Tag, unconnected to the parse tree.\n        Its contents are a copy of the old Tag's contents.\n        "),
                                             ('string', ['string'], ''),
                                             ('_all_strings',
                                              ['strip=False',
                                               'types=(NavigableString, CData)'],
                                              'Yield all strings of certain classes, possibly stripping them.\n\n        By default, yields only NavigableString and CData objects. So\n        no comments, processing instructions, etc.\n        '),
                                             ('get_text',
                                              ["separator=u''",
                                               'strip=False',
                                               'types=(NavigableString, CData)'],
                                              '\n        Get all child strings, concatenated using the given separator.\n        '),
                                             ('decompose',
                                              [],
                                              'Recursively destroys the contents of this tree.'),
                                             ('clear',
                                              ['decompose=False'],
                                              '\n        Extract all children. If decompose is True, decompose instead.\n        '),
                                             ('index',
                                              ['element'],
                                              '\n        Find the index of a child by identity, not value. Avoids issues with\n        tag.contents.index(element) getting the index of equal elements.\n        '),
                                             ('get',
                                              ['key', 'default=None'],
                                              "Returns the value of the 'key' attribute for the tag, or\n        the value given for 'default' if it doesn't have that\n        attribute."),
                                             ('has_attr', ['key'], ''),
                                             ('__hash__', [], ''),
                                             ('__getitem__',
                                              ['key'],
                                              "tag[key] returns the value of the 'key' attribute for the tag,\n        and throws an exception if it's not there."),
                                             ('__iter__',
                                              [],
                                              'Iterating over a tag iterates over its contents.'),
                                             ('__len__',
                                              [],
                                              'The length of a tag is the length of its list of contents.'),
                                             ('__contains__', ['x'], ''),
                                             ('__nonzero__',
                                              [],
                                              'A tag is non-None even if it has no contents.'),
                                             ('__setitem__',
                                              ['key', 'value'],
                                              "Setting tag[key] sets the value of the 'key' attribute for the\n        tag."),
                                             ('__delitem__',
                                              ['key'],
                                              "Deleting tag[key] deletes all 'key' attributes for the tag."),
                                             ('__call__',
                                              ['*args', '**kwargs'],
                                              "Calling a tag like a function is the same as calling its\n        find_all() method. Eg. tag('a') returns a list of all the A tags\n        found within this tag."),
                                             ('__getattr__', ['tag'], ''),
                                             ('__eq__',
                                              ['other'],
                                              'Returns true iff this tag has the same name, the same attributes,\n        and the same contents (recursively) as the given tag.'),
                                             ('__ne__',
                                              ['other'],
                                              'Returns true iff this tag is not identical to the other tag,\n        as defined in __eq__.'),
                                             ('__repr__',
                                              ["encoding='unicode-escape'"],
                                              'Renders this tag as a string.'),
                                             ('__unicode__', [], ''),
                                             ('__str__', [], ''),
                                             ('encode',
                                              ['encoding=DEFAULT_OUTPUT_ENCODING',
                                               'indent_level=None',
                                               "formatter='minimal'",
                                               "errors='xmlcharrefreplace'"],
                                              ''),
                                             ('_should_pretty_print',
                                              ['indent_level'],
                                              'Should this tag be pretty-printed?'),
                                             ('decode',
                                              ['indent_level=None',
                                               'eventual_encoding=DEFAULT_OUTPUT_ENCODING',
                                               "formatter='minimal'"],
                                              "Returns a Unicode representation of this tag and its contents.\n\n        :param eventual_encoding: The tag is destined to be\n           encoded into this encoding. This method is _not_\n           responsible for performing that encoding. This information\n           is passed in so that it can be substituted in if the\n           document contains a <META> tag that mentions the document's\n           encoding.\n        "),
                                             ('prettify',
                                              ['encoding=None', "formatter='minimal'"],
                                              ''),
                                             ('decode_contents',
                                              ['indent_level=None',
                                               'eventual_encoding=DEFAULT_OUTPUT_ENCODING',
                                               "formatter='minimal'"],
                                              "Renders the contents of this tag as a Unicode string.\n\n        :param indent_level: Each line of the rendering will be\n           indented this many spaces.\n\n        :param eventual_encoding: The tag is destined to be\n           encoded into this encoding. This method is _not_\n           responsible for performing that encoding. This information\n           is passed in so that it can be substituted in if the\n           document contains a <META> tag that mentions the document's\n           encoding.\n\n        :param formatter: The output formatter responsible for converting\n           entities to Unicode characters.\n        "),
                                             ('encode_contents',
                                              ['indent_level=None',
                                               'encoding=DEFAULT_OUTPUT_ENCODING',
                                               "formatter='minimal'"],
                                              'Renders the contents of this tag as a bytestring.\n\n        :param indent_level: Each line of the rendering will be\n           indented this many spaces.\n\n        :param eventual_encoding: The bytestring will be in this encoding.\n\n        :param formatter: The output formatter responsible for converting\n           entities to Unicode characters.\n        '),
                                             ('renderContents',
                                              ['encoding=DEFAULT_OUTPUT_ENCODING',
                                               'prettyPrint=False',
                                               'indentLevel=0'],
                                              ''),
                                             ('find',
                                              ['name=None',
                                               'attrs={}',
                                               'recursive=True',
                                               'text=None',
                                               '**kwargs'],
                                              'Return only the first child of this Tag matching the given\n        criteria.'),
                                             ('find_all',
                                              ['name=None',
                                               'attrs={}',
                                               'recursive=True',
                                               'text=None',
                                               'limit=None',
                                               '**kwargs'],
                                              "Extracts a list of Tag objects that match the given\n        criteria.  You can specify the name of the Tag and any\n        attributes you want the Tag to have.\n\n        The value of a key-value pair in the 'attrs' map can be a\n        string, a list of strings, a regular expression object, or a\n        callable that takes a string and returns whether or not the\n        string matches for some custom definition of 'matches'. The\n        same is true of the tag name."),
                                             ('select_one',
                                              ['selector'],
                                              'Perform a CSS selection operation on the current element.'),
                                             ('select',
                                              ['selector',
                                               '_candidate_generator=None',
                                               'limit=None'],
                                              'Perform a CSS selection operation on the current element.'),
                                             ('childGenerator', [], ''),
                                             ('recursiveChildGenerator', [], ''),
                                             ('has_key',
                                              ['key'],
                                              'This was kind of misleading because has_key() (attributes)\n        was different from __in__ (contents). has_key() is gone in\n        Python 3, anyway.')],
                                 'properties': ['parser_class',
                                                'name',
                                                'namespace',
                                                'prefix',
                                                'attrs',
                                                'contents',
                                                'hidden',
                                                'can_be_empty_element',
                                                'parserClass',
                                                'is_empty_element',
                                                'isSelfClosing',
                                                'string',
                                                'strings',
                                                'stripped_strings',
                                                'getText',
                                                'text',
                                                '__str__',
                                                '__repr__',
                                                'findChild',
                                                'findAll',
                                                'findChildren',
                                                'children',
                                                'descendants',
                                                '_selector_combinators',
                                                '_select_debug']},
             'bs4.testing.HTML5TreeBuilderSmokeTest': {'bases': ['bs4.testing.HTMLTreeBuilderSmokeTest'],
                                                       'constructor': [],
                                                       'docstring': 'Smoke test for a tree builder that supports HTML5.',
                                                       'methods': [('test_real_xhtml_document',
                                                                    [],
                                                                    ''),
                                                                   ('test_html_tags_have_namespace',
                                                                    [],
                                                                    ''),
                                                                   ('test_svg_tags_have_namespace',
                                                                    [],
                                                                    ''),
                                                                   ('test_mathml_tags_have_namespace',
                                                                    [],
                                                                    ''),
                                                                   ('test_xml_declaration_becomes_comment',
                                                                    [],
                                                                    '')],
                                                       'properties': []},
             'bs4.testing.HTMLTreeBuilderSmokeTest': {'bases': ['object'],
                                                      'constructor': [],
                                                      'docstring': "A basic test of a treebuilder's competence.\n\n    Any HTML treebuilder, present or future, should be able to pass\n    these tests. With invalid markup, there's room for interpretation,\n    and different parsers can handle it differently. But with the\n    markup in these tests, there's not much room for interpretation.\n    ",
                                                      'methods': [('test_pickle_and_unpickle_identity',
                                                                   [],
                                                                   ''),
                                                                  ('assertDoctypeHandled',
                                                                   ['doctype_fragment'],
                                                                   'Assert that a given doctype string is handled correctly.'),
                                                                  ('_document_with_doctype',
                                                                   ['doctype_fragment'],
                                                                   'Generate and parse a document with the given doctype.'),
                                                                  ('test_normal_doctypes',
                                                                   [],
                                                                   'Make sure normal, everyday HTML doctypes are handled correctly.'),
                                                                  ('test_empty_doctype',
                                                                   [],
                                                                   ''),
                                                                  ('test_public_doctype_with_url',
                                                                   [],
                                                                   ''),
                                                                  ('test_system_doctype',
                                                                   [],
                                                                   ''),
                                                                  ('test_namespaced_system_doctype',
                                                                   [],
                                                                   ''),
                                                                  ('test_namespaced_public_doctype',
                                                                   [],
                                                                   ''),
                                                                  ('test_real_xhtml_document',
                                                                   [],
                                                                   'A real XHTML document should come out more or less the same as it went in.'),
                                                                  ('test_processing_instruction',
                                                                   [],
                                                                   ''),
                                                                  ('test_deepcopy',
                                                                   [],
                                                                   'Make sure you can copy the tree builder.\n\n        This is important because the builder is part of a\n        BeautifulSoup object, and we want to be able to copy that.\n        '),
                                                                  ('test_p_tag_is_never_empty_element',
                                                                   [],
                                                                   "A <p> tag is never designated as an empty-element tag.\n\n        Even if the markup shows it as an empty-element tag, it\n        shouldn't be presented that way.\n        "),
                                                                  ('test_unclosed_tags_get_closed',
                                                                   [],
                                                                   "A tag that's not closed by the end of the document should be closed.\n\n        This applies to all tags except empty-element tags.\n        "),
                                                                  ('test_br_is_always_empty_element_tag',
                                                                   [],
                                                                   'A <br> tag is designated as an empty-element tag.\n\n        Some parsers treat <br></br> as one <br/> tag, some parsers as\n        two tags, but it should always be an empty-element tag.\n        '),
                                                                  ('test_nested_formatting_elements',
                                                                   [],
                                                                   ''),
                                                                  ('test_double_head', [], ''),
                                                                  ('test_comment', [], ''),
                                                                  ('test_preserved_whitespace_in_pre_and_textarea',
                                                                   [],
                                                                   'Whitespace must be preserved in <pre> and <textarea> tags.'),
                                                                  ('test_nested_inline_elements',
                                                                   [],
                                                                   'Inline elements can be nested indefinitely.'),
                                                                  ('test_nested_block_level_elements',
                                                                   [],
                                                                   'Block elements can be nested.'),
                                                                  ('test_correctly_nested_tables',
                                                                   [],
                                                                   'One table can go inside another one.'),
                                                                  ('test_deeply_nested_multivalued_attribute',
                                                                   [],
                                                                   ''),
                                                                  ('test_multivalued_attribute_on_html',
                                                                   [],
                                                                   ''),
                                                                  ('test_angle_brackets_in_attribute_values_are_escaped',
                                                                   [],
                                                                   ''),
                                                                  ('test_entities_in_attributes_converted_to_unicode',
                                                                   [],
                                                                   ''),
                                                                  ('test_entities_in_text_converted_to_unicode',
                                                                   [],
                                                                   ''),
                                                                  ('test_quot_entity_converted_to_quotation_mark',
                                                                   [],
                                                                   ''),
                                                                  ('test_out_of_range_entity',
                                                                   [],
                                                                   ''),
                                                                  ('test_multipart_strings',
                                                                   [],
                                                                   'Mostly to prevent a recurrence of a bug in the html5lib treebuilder.'),
                                                                  ('test_head_tag_between_head_and_body',
                                                                   [],
                                                                   'Prevent recurrence of a bug in the html5lib treebuilder.'),
                                                                  ('test_multiple_copies_of_a_tag',
                                                                   [],
                                                                   'Prevent recurrence of a bug in the html5lib treebuilder.'),
                                                                  ('test_basic_namespaces',
                                                                   [],
                                                                   "Parsers don't need to *understand* namespaces, but at the\n        very least they should not choke on namespaces or lose\n        data."),
                                                                  ('test_multivalued_attribute_value_becomes_list',
                                                                   [],
                                                                   ''),
                                                                  ('test_can_parse_unicode_document',
                                                                   [],
                                                                   ''),
                                                                  ('test_soupstrainer',
                                                                   [],
                                                                   'Parsers should be able to work with SoupStrainers.'),
                                                                  ('test_single_quote_attribute_values_become_double_quotes',
                                                                   [],
                                                                   ''),
                                                                  ('test_attribute_values_with_nested_quotes_are_left_alone',
                                                                   [],
                                                                   ''),
                                                                  ('test_attribute_values_with_double_nested_quotes_get_quoted',
                                                                   [],
                                                                   ''),
                                                                  ('test_ampersand_in_attribute_value_gets_escaped',
                                                                   [],
                                                                   ''),
                                                                  ('test_escaped_ampersand_in_attribute_value_is_left_alone',
                                                                   [],
                                                                   ''),
                                                                  ('test_entities_in_strings_converted_during_parsing',
                                                                   [],
                                                                   ''),
                                                                  ('test_smart_quotes_converted_on_the_way_in',
                                                                   [],
                                                                   ''),
                                                                  ('test_non_breaking_spaces_converted_on_the_way_in',
                                                                   [],
                                                                   ''),
                                                                  ('test_entities_converted_on_the_way_out',
                                                                   [],
                                                                   ''),
                                                                  ('test_real_iso_latin_document',
                                                                   [],
                                                                   ''),
                                                                  ('test_real_shift_jis_document',
                                                                   [],
                                                                   ''),
                                                                  ('test_real_hebrew_document',
                                                                   [],
                                                                   ''),
                                                                  ('test_meta_tag_reflects_current_encoding',
                                                                   [],
                                                                   ''),
                                                                  ('test_html5_style_meta_tag_reflects_current_encoding',
                                                                   [],
                                                                   ''),
                                                                  ('test_tag_with_no_attributes_can_have_attributes_added',
                                                                   [],
                                                                   '')],
                                                      'properties': []},
             'bs4.testing.SoupTest': {'bases': ['unittest.TestCase'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('soup',
                                                   ['markup', '**kwargs'],
                                                   'Build a Beautiful Soup object from markup.'),
                                                  ('document_for',
                                                   ['markup'],
                                                   'Turn an HTML fragment into a document.\n\n        The details depend on the builder.\n        '),
                                                  ('assertSoupEquals',
                                                   ['to_parse', 'compare_parsed_to=None'],
                                                   ''),
                                                  ('assertConnectedness',
                                                   ['element'],
                                                   'Ensure that next_element and previous_element are properly\n        set for all descendants of the given element.\n        ')],
                                      'properties': ['default_builder']},
             'bs4.testing.XMLTreeBuilderSmokeTest': {'bases': ['object'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('test_pickle_and_unpickle_identity',
                                                                  [],
                                                                  ''),
                                                                 ('test_docstring_generated',
                                                                  [],
                                                                  ''),
                                                                 ('test_xml_declaration',
                                                                  [],
                                                                  ''),
                                                                 ('test_real_xhtml_document',
                                                                  [],
                                                                  'A real XHTML document should come out *exactly* the same as it went in.'),
                                                                 ('test_formatter_processes_script_tag_for_xml_documents',
                                                                  [],
                                                                  ''),
                                                                 ('test_can_parse_unicode_document',
                                                                  [],
                                                                  ''),
                                                                 ('test_popping_namespaced_tag',
                                                                  [],
                                                                  ''),
                                                                 ('test_docstring_includes_correct_encoding',
                                                                  [],
                                                                  ''),
                                                                 ('test_large_xml_document',
                                                                  [],
                                                                  'A large XML document should come out the same as it went in.'),
                                                                 ('test_tags_are_empty_element_if_and_only_if_they_are_empty',
                                                                  [],
                                                                  ''),
                                                                 ('test_namespaces_are_preserved',
                                                                  [],
                                                                  ''),
                                                                 ('test_closing_namespaced_tag',
                                                                  [],
                                                                  ''),
                                                                 ('test_namespaced_attributes',
                                                                  [],
                                                                  ''),
                                                                 ('test_namespaced_attributes_xml_namespace',
                                                                  [],
                                                                  '')],
                                                     'properties': []},
             'bs4.tests.test_builder_registry.BuiltInRegistryTest': {'bases': ['unittest.TestCase'],
                                                                     'constructor': [],
                                                                     'docstring': 'Test the built-in registry with the default builders registered.',
                                                                     'methods': [('test_combination',
                                                                                  [],
                                                                                  ''),
                                                                                 ('test_lookup_by_markup_type',
                                                                                  [],
                                                                                  ''),
                                                                                 ('test_named_library',
                                                                                  [],
                                                                                  ''),
                                                                                 ('test_beautifulsoup_constructor_does_lookup',
                                                                                  [],
                                                                                  '')],
                                                                     'properties': []},
             'bs4.tests.test_builder_registry.RegistryTest': {'bases': ['unittest.TestCase'],
                                                              'constructor': [],
                                                              'docstring': 'Test the TreeBuilderRegistry class in general.',
                                                              'methods': [('setUp', [], ''),
                                                                          ('builder_for_features',
                                                                           ['*feature_list'],
                                                                           ''),
                                                                          ('test_register_with_no_features',
                                                                           [],
                                                                           ''),
                                                                          ('test_register_with_features_makes_lookup_succeed',
                                                                           [],
                                                                           ''),
                                                                          ('test_lookup_fails_when_no_builder_implements_feature',
                                                                           [],
                                                                           ''),
                                                                          ('test_lookup_gets_most_recent_registration_when_no_feature_specified',
                                                                           [],
                                                                           ''),
                                                                          ('test_lookup_fails_when_no_tree_builders_registered',
                                                                           [],
                                                                           ''),
                                                                          ('test_lookup_gets_most_recent_builder_supporting_all_features',
                                                                           [],
                                                                           ''),
                                                                          ('test_lookup_fails_when_cannot_reconcile_requested_features',
                                                                           [],
                                                                           '')],
                                                              'properties': ['registry']},
             'bs4.tests.test_html5lib.HTML5LibBuilderSmokeTest': {'bases': ['bs4.testing.SoupTest',
                                                                            'bs4.testing.HTML5TreeBuilderSmokeTest'],
                                                                  'constructor': [],
                                                                  'docstring': 'See ``HTML5TreeBuilderSmokeTest``.',
                                                                  'methods': [('test_soupstrainer',
                                                                               [],
                                                                               ''),
                                                                              ('test_correctly_nested_tables',
                                                                               [],
                                                                               "html5lib inserts <tbody> tags where other parsers don't."),
                                                                              ('test_xml_declaration_followed_by_doctype',
                                                                               [],
                                                                               ''),
                                                                              ('test_reparented_markup',
                                                                               [],
                                                                               ''),
                                                                              ('test_reparented_markup_ends_with_whitespace',
                                                                               [],
                                                                               ''),
                                                                              ('test_processing_instruction',
                                                                               [],
                                                                               'Processing instructions become comments.'),
                                                                              ('test_cloned_multivalue_node',
                                                                               [],
                                                                               '')],
                                                                  'properties': ['default_builder']},
             'bs4.tests.test_htmlparser.HTMLParserTreeBuilderSmokeTest': {'bases': ['bs4.testing.SoupTest',
                                                                                    'bs4.testing.HTMLTreeBuilderSmokeTest'],
                                                                          'constructor': [],
                                                                          'docstring': '',
                                                                          'methods': [('test_namespaced_system_doctype',
                                                                                       [],
                                                                                       ''),
                                                                                      ('test_namespaced_public_doctype',
                                                                                       [],
                                                                                       ''),
                                                                                      ('test_builder_is_pickled',
                                                                                       [],
                                                                                       'Unlike most tree builders, HTMLParserTreeBuilder and will\n        be restored after pickling.\n        ')],
                                                                          'properties': ['default_builder']},
             'bs4.tests.test_soup.TestAttributeValueWithCharsetSubstitution': {'bases': ['unittest.TestCase'],
                                                                               'constructor': [],
                                                                               'docstring': '',
                                                                               'methods': [('test_content_meta_attribute_value',
                                                                                            [],
                                                                                            '')],
                                                                               'properties': []},
             'bs4.tests.test_soup.TestConstructor': {'bases': ['bs4.testing.SoupTest'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('test_short_unicode_input',
                                                                  [],
                                                                  ''),
                                                                 ('test_embedded_null', [], ''),
                                                                 ('test_exclude_encodings',
                                                                  [],
                                                                  '')],
                                                     'properties': []},
             'bs4.tests.test_soup.TestEncodingConversion': {'bases': ['bs4.testing.SoupTest'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [('setUp', [], ''),
                                                                        ('test_ascii_in_unicode_out',
                                                                         [],
                                                                         ''),
                                                                        ('test_unicode_in_unicode_out',
                                                                         [],
                                                                         ''),
                                                                        ('test_utf8_in_unicode_out',
                                                                         [],
                                                                         ''),
                                                                        ('test_utf8_out',
                                                                         [],
                                                                         ''),
                                                                        ('test_attribute_name_containing_unicode_characters',
                                                                         [],
                                                                         '')],
                                                            'properties': ['unicode_data',
                                                                           'utf8_data']},
             'bs4.tests.test_soup.TestEntitySubstitution': {'bases': ['unittest.TestCase'],
                                                            'constructor': [],
                                                            'docstring': 'Standalone tests of the EntitySubstitution class.',
                                                            'methods': [('setUp', [], ''),
                                                                        ('test_simple_html_substitution',
                                                                         [],
                                                                         ''),
                                                                        ('test_smart_quote_substitution',
                                                                         [],
                                                                         ''),
                                                                        ('test_xml_converstion_includes_no_quotes_if_make_quoted_attribute_is_false',
                                                                         [],
                                                                         ''),
                                                                        ('test_xml_attribute_quoting_normally_uses_double_quotes',
                                                                         [],
                                                                         ''),
                                                                        ('test_xml_attribute_quoting_uses_single_quotes_when_value_contains_double_quotes',
                                                                         [],
                                                                         ''),
                                                                        ('test_xml_attribute_quoting_escapes_single_quotes_when_value_contains_both_single_and_double_quotes',
                                                                         [],
                                                                         ''),
                                                                        ('test_xml_quotes_arent_escaped_when_value_is_not_being_quoted',
                                                                         [],
                                                                         ''),
                                                                        ('test_xml_quoting_handles_angle_brackets',
                                                                         [],
                                                                         ''),
                                                                        ('test_xml_quoting_handles_ampersands',
                                                                         [],
                                                                         ''),
                                                                        ('test_xml_quoting_including_ampersands_when_they_are_part_of_an_entity',
                                                                         [],
                                                                         ''),
                                                                        ('test_xml_quoting_ignoring_ampersands_when_they_are_part_of_an_entity',
                                                                         [],
                                                                         ''),
                                                                        ('test_quotes_not_html_substituted',
                                                                         [],
                                                                         "There's no need to do this except inside attribute values.")],
                                                            'properties': ['sub']},
             'bs4.tests.test_soup.TestNamedspacedAttribute': {'bases': ['bs4.testing.SoupTest'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('test_name_may_be_none',
                                                                           [],
                                                                           ''),
                                                                          ('test_attribute_is_equivalent_to_colon_separated_string',
                                                                           [],
                                                                           ''),
                                                                          ('test_attributes_are_equivalent_if_prefix_and_name_identical',
                                                                           [],
                                                                           '')],
                                                              'properties': []},
             'bs4.tests.test_soup.TestSelectiveParsing': {'bases': ['bs4.testing.SoupTest'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('test_parse_with_soupstrainer',
                                                                       [],
                                                                       '')],
                                                          'properties': []},
             'bs4.tests.test_soup.TestUnicodeDammit': {'bases': ['unittest.TestCase'],
                                                       'constructor': [],
                                                       'docstring': 'Standalone tests of UnicodeDammit.',
                                                       'methods': [('test_unicode_input',
                                                                    [],
                                                                    ''),
                                                                   ('test_smart_quotes_to_unicode',
                                                                    [],
                                                                    ''),
                                                                   ('test_smart_quotes_to_xml_entities',
                                                                    [],
                                                                    ''),
                                                                   ('test_smart_quotes_to_html_entities',
                                                                    [],
                                                                    ''),
                                                                   ('test_smart_quotes_to_ascii',
                                                                    [],
                                                                    ''),
                                                                   ('test_detect_utf8', [], ''),
                                                                   ('test_convert_hebrew',
                                                                    [],
                                                                    ''),
                                                                   ('test_dont_see_smart_quotes_where_there_are_none',
                                                                    [],
                                                                    ''),
                                                                   ('test_ignore_inappropriate_codecs',
                                                                    [],
                                                                    ''),
                                                                   ('test_ignore_invalid_codecs',
                                                                    [],
                                                                    ''),
                                                                   ('test_exclude_encodings',
                                                                    [],
                                                                    ''),
                                                                   ('test_encoding_detector_replaces_junk_in_encoding_name_with_replacement_character',
                                                                    [],
                                                                    ''),
                                                                   ('test_detect_html5_style_meta_tag',
                                                                    [],
                                                                    ''),
                                                                   ('test_last_ditch_entity_replacement',
                                                                    [],
                                                                    ''),
                                                                   ('test_byte_order_mark_removed',
                                                                    [],
                                                                    ''),
                                                                   ('test_detwingle', [], ''),
                                                                   ('test_detwingle_ignores_multibyte_characters',
                                                                    [],
                                                                    '')],
                                                       'properties': []},
             'bs4.tests.test_soup.TestWarnings': {'bases': ['bs4.testing.SoupTest'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('test_disk_file_warning',
                                                               [],
                                                               ''),
                                                              ('test_url_warning', [], '')],
                                                  'properties': []},
             'bs4.tests.test_tree.ProximityTest': {'bases': ['bs4.tests.test_tree.TreeTest'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('setUp', [], '')],
                                                   'properties': ['tree']},
             'bs4.tests.test_tree.SiblingTest': {'bases': ['bs4.tests.test_tree.TreeTest'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('setUp', [], '')],
                                                 'properties': ['tree']},
             'bs4.tests.test_tree.TestCDAtaListAttributes': {'bases': ['bs4.testing.SoupTest'],
                                                             'constructor': [],
                                                             'docstring': "Testing cdata-list attributes like 'class'.\n    ",
                                                             'methods': [('test_single_value_becomes_list',
                                                                          [],
                                                                          ''),
                                                                         ('test_multiple_values_becomes_list',
                                                                          [],
                                                                          ''),
                                                                         ('test_multiple_values_separated_by_weird_whitespace',
                                                                          [],
                                                                          ''),
                                                                         ('test_attributes_joined_into_string_on_output',
                                                                          [],
                                                                          ''),
                                                                         ('test_accept_charset',
                                                                          [],
                                                                          ''),
                                                                         ('test_cdata_attribute_applying_only_to_one_tag',
                                                                          [],
                                                                          ''),
                                                                         ('test_string_has_immutable_name_property',
                                                                          [],
                                                                          '')],
                                                             'properties': []},
             'bs4.tests.test_tree.TestElementObjects': {'bases': ['bs4.testing.SoupTest'],
                                                        'constructor': [],
                                                        'docstring': 'Test various features of element objects.',
                                                        'methods': [('test_len',
                                                                     [],
                                                                     'The length of an element is its number of children.'),
                                                                    ('test_member_access_invokes_find',
                                                                     [],
                                                                     "Accessing a Python member .foo invokes find('foo')"),
                                                                    ('test_deprecated_member_access',
                                                                     [],
                                                                     ''),
                                                                    ('test_has_attr',
                                                                     [],
                                                                     "has_attr() checks for the presence of an attribute.\n\n        Please note note: has_attr() is different from\n        __in__. has_attr() checks the tag's attributes and __in__\n        checks the tag's chidlren.\n        "),
                                                                    ('test_attributes_come_out_in_alphabetical_order',
                                                                     [],
                                                                     ''),
                                                                    ('test_string', [], ''),
                                                                    ('test_empty_tag_has_no_string',
                                                                     [],
                                                                     ''),
                                                                    ('test_tag_with_multiple_children_has_no_string',
                                                                     [],
                                                                     ''),
                                                                    ('test_tag_with_recursive_string_has_string',
                                                                     [],
                                                                     ''),
                                                                    ('test_lack_of_string',
                                                                     [],
                                                                     'Only a tag containing a single text node has a .string.'),
                                                                    ('test_all_text',
                                                                     [],
                                                                     'Tag.text and Tag.get_text(sep=u"") -> all child text, concatenated'),
                                                                    ('test_get_text_ignores_comments',
                                                                     [],
                                                                     ''),
                                                                    ('test_all_strings_ignores_comments',
                                                                     [],
                                                                     '')],
                                                        'properties': []},
             'bs4.tests.test_tree.TestEncoding': {'bases': ['bs4.testing.SoupTest'],
                                                  'constructor': [],
                                                  'docstring': 'Test the ability to encode objects into strings.',
                                                  'methods': [('test_unicode_string_can_be_encoded',
                                                               [],
                                                               ''),
                                                              ('test_tag_containing_unicode_string_can_be_encoded',
                                                               [],
                                                               ''),
                                                              ('test_encoding_substitutes_unrecognized_characters_by_default',
                                                               [],
                                                               ''),
                                                              ('test_encoding_can_be_made_strict',
                                                               [],
                                                               ''),
                                                              ('test_decode_contents', [], ''),
                                                              ('test_encode_contents', [], ''),
                                                              ('test_deprecated_renderContents',
                                                               [],
                                                               ''),
                                                              ('test_repr', [], '')],
                                                  'properties': []},
             'bs4.tests.test_tree.TestFind': {'bases': ['bs4.tests.test_tree.TreeTest'],
                                              'constructor': [],
                                              'docstring': "Basic tests of the find() method.\n\n    find() just calls find_all() with limit=1, so it's not tested all\n    that thouroughly here.\n    ",
                                              'methods': [('test_find_tag', [], ''),
                                                          ('test_unicode_text_find', [], ''),
                                                          ('test_unicode_attribute_find',
                                                           [],
                                                           ''),
                                                          ('test_find_everything',
                                                           [],
                                                           'Test an optimization that finds all tags.'),
                                                          ('test_find_everything_with_name',
                                                           [],
                                                           'Test an optimization that finds all tags with a given name.')],
                                              'properties': []},
             'bs4.tests.test_tree.TestFindAll': {'bases': ['bs4.tests.test_tree.TreeTest'],
                                                 'constructor': [],
                                                 'docstring': 'Basic tests of the find_all() method.',
                                                 'methods': [('test_find_all_text_nodes',
                                                              [],
                                                              'You can search the tree for text nodes.'),
                                                             ('test_find_all_limit',
                                                              [],
                                                              'You can limit the number of items returned by find_all.'),
                                                             ('test_calling_a_tag_is_calling_findall',
                                                              [],
                                                              ''),
                                                             ('test_find_all_with_self_referential_data_structure_does_not_cause_infinite_recursion',
                                                              [],
                                                              ''),
                                                             ('test_find_all_resultset',
                                                              [],
                                                              'All find_all calls return a ResultSet')],
                                                 'properties': []},
             'bs4.tests.test_tree.TestFindAllBasicNamespaces': {'bases': ['bs4.tests.test_tree.TreeTest'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [('test_find_by_namespaced_name',
                                                                             [],
                                                                             '')],
                                                                'properties': []},
             'bs4.tests.test_tree.TestFindAllByAttribute': {'bases': ['bs4.tests.test_tree.TreeTest'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [('test_find_all_by_attribute_name',
                                                                         [],
                                                                         ''),
                                                                        ('test_find_all_by_utf8_attribute_value',
                                                                         [],
                                                                         ''),
                                                                        ('test_find_all_by_attribute_dict',
                                                                         [],
                                                                         ''),
                                                                        ('test_find_all_by_class',
                                                                         [],
                                                                         ''),
                                                                        ('test_find_by_class_when_multiple_classes_present',
                                                                         [],
                                                                         ''),
                                                                        ('test_find_all_with_non_dictionary_for_attrs_finds_by_class',
                                                                         [],
                                                                         ''),
                                                                        ('test_find_all_with_string_for_attrs_finds_multiple_classes',
                                                                         [],
                                                                         ''),
                                                                        ('test_find_all_by_attribute_soupstrainer',
                                                                         [],
                                                                         ''),
                                                                        ('test_find_all_with_missing_atribute',
                                                                         [],
                                                                         ''),
                                                                        ('test_find_all_with_defined_attribute',
                                                                         [],
                                                                         ''),
                                                                        ('test_find_all_with_numeric_attribute',
                                                                         [],
                                                                         ''),
                                                                        ('test_find_all_with_list_attribute_values',
                                                                         [],
                                                                         ''),
                                                                        ('test_find_all_with_regular_expression_attribute_value',
                                                                         [],
                                                                         ''),
                                                                        ('test_find_by_name_and_containing_string',
                                                                         [],
                                                                         ''),
                                                                        ('test_find_by_name_and_containing_string_when_string_is_buried',
                                                                         [],
                                                                         ''),
                                                                        ('test_find_by_attribute_and_containing_string',
                                                                         [],
                                                                         '')],
                                                            'properties': []},
             'bs4.tests.test_tree.TestFindAllByName': {'bases': ['bs4.tests.test_tree.TreeTest'],
                                                       'constructor': [],
                                                       'docstring': 'Test ways of finding tags by tag name.',
                                                       'methods': [('setUp', [], ''),
                                                                   ('test_find_all_by_tag_name',
                                                                    [],
                                                                    ''),
                                                                   ('test_find_all_by_name_and_text',
                                                                    [],
                                                                    ''),
                                                                   ('test_find_all_on_non_root_element',
                                                                    [],
                                                                    ''),
                                                                   ('test_calling_element_invokes_find_all',
                                                                    [],
                                                                    ''),
                                                                   ('test_find_all_by_tag_strainer',
                                                                    [],
                                                                    ''),
                                                                   ('test_find_all_by_tag_names',
                                                                    [],
                                                                    ''),
                                                                   ('test_find_all_by_tag_dict',
                                                                    [],
                                                                    ''),
                                                                   ('test_find_all_by_tag_re',
                                                                    [],
                                                                    ''),
                                                                   ('test_find_all_with_tags_matching_method',
                                                                    [],
                                                                    '')],
                                                       'properties': ['tree']},
             'bs4.tests.test_tree.TestIndex': {'bases': ['bs4.tests.test_tree.TreeTest'],
                                               'constructor': [],
                                               'docstring': 'Test Tag.index',
                                               'methods': [('test_index', [], '')],
                                               'properties': []},
             'bs4.tests.test_tree.TestNavigableStringSubclasses': {'bases': ['bs4.testing.SoupTest'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [('test_cdata',
                                                                                [],
                                                                                ''),
                                                                               ('test_cdata_is_never_formatted',
                                                                                [],
                                                                                'Text inside a CData object is passed into the formatter.\n\n        But the return value is ignored.\n        '),
                                                                               ('test_doctype_ends_in_newline',
                                                                                [],
                                                                                ''),
                                                                               ('test_declaration',
                                                                                [],
                                                                                '')],
                                                                   'properties': ['count']},
             'bs4.tests.test_tree.TestNextOperations': {'bases': ['bs4.tests.test_tree.ProximityTest'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('setUp', [], ''),
                                                                    ('test_next', [], ''),
                                                                    ('test_next_of_last_item_is_none',
                                                                     [],
                                                                     ''),
                                                                    ('test_next_of_root_is_none',
                                                                     [],
                                                                     ''),
                                                                    ('test_find_all_next',
                                                                     [],
                                                                     ''),
                                                                    ('test_find_next', [], ''),
                                                                    ('test_find_next_for_text_element',
                                                                     [],
                                                                     ''),
                                                                    ('test_next_generator',
                                                                     [],
                                                                     '')],
                                                        'properties': ['start']},
             'bs4.tests.test_tree.TestNextSibling': {'bases': ['bs4.tests.test_tree.SiblingTest'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('setUp', [], ''),
                                                                 ('test_next_sibling_of_root_is_none',
                                                                  [],
                                                                  ''),
                                                                 ('test_next_sibling', [], ''),
                                                                 ('test_next_sibling_may_not_exist',
                                                                  [],
                                                                  ''),
                                                                 ('test_find_next_sibling',
                                                                  [],
                                                                  ''),
                                                                 ('test_next_siblings', [], ''),
                                                                 ('test_next_sibling_for_text_element',
                                                                  [],
                                                                  '')],
                                                     'properties': ['start']},
             'bs4.tests.test_tree.TestParentOperations': {'bases': ['bs4.tests.test_tree.TreeTest'],
                                                          'constructor': [],
                                                          'docstring': "Test navigation and searching through an element's parents.",
                                                          'methods': [('setUp', [], ''),
                                                                      ('test_parent', [], ''),
                                                                      ('test_parent_of_top_tag_is_soup_object',
                                                                       [],
                                                                       ''),
                                                                      ('test_soup_object_has_no_parent',
                                                                       [],
                                                                       ''),
                                                                      ('test_find_parents',
                                                                       [],
                                                                       ''),
                                                                      ('test_find_parent',
                                                                       [],
                                                                       ''),
                                                                      ('test_parent_of_text_element',
                                                                       [],
                                                                       ''),
                                                                      ('test_text_element_find_parent',
                                                                       [],
                                                                       ''),
                                                                      ('test_parent_generator',
                                                                       [],
                                                                       '')],
                                                          'properties': ['tree', 'start']},
             'bs4.tests.test_tree.TestPersistence': {'bases': ['bs4.testing.SoupTest'],
                                                     'constructor': [],
                                                     'docstring': 'Testing features like pickle and deepcopy.',
                                                     'methods': [('setUp', [], ''),
                                                                 ('test_pickle_and_unpickle_identity',
                                                                  [],
                                                                  ''),
                                                                 ('test_deepcopy_identity',
                                                                  [],
                                                                  ''),
                                                                 ('test_unicode_pickle',
                                                                  [],
                                                                  ''),
                                                                 ('test_copy_navigablestring_is_not_attached_to_tree',
                                                                  [],
                                                                  ''),
                                                                 ('test_copy_navigablestring_subclass_has_same_type',
                                                                  [],
                                                                  ''),
                                                                 ('test_copy_entire_soup',
                                                                  [],
                                                                  ''),
                                                                 ('test_copy_tag_copies_contents',
                                                                  [],
                                                                  '')],
                                                     'properties': ['page', 'tree']},
             'bs4.tests.test_tree.TestPreviousOperations': {'bases': ['bs4.tests.test_tree.ProximityTest'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [('setUp', [], ''),
                                                                        ('test_previous',
                                                                         [],
                                                                         ''),
                                                                        ('test_previous_of_first_item_is_none',
                                                                         [],
                                                                         ''),
                                                                        ('test_previous_of_root_is_none',
                                                                         [],
                                                                         ''),
                                                                        ('test_find_all_previous',
                                                                         [],
                                                                         ''),
                                                                        ('test_find_previous',
                                                                         [],
                                                                         ''),
                                                                        ('test_find_previous_for_text_element',
                                                                         [],
                                                                         ''),
                                                                        ('test_previous_generator',
                                                                         [],
                                                                         '')],
                                                            'properties': ['end']},
             'bs4.tests.test_tree.TestPreviousSibling': {'bases': ['bs4.tests.test_tree.SiblingTest'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('setUp', [], ''),
                                                                     ('test_previous_sibling_of_root_is_none',
                                                                      [],
                                                                      ''),
                                                                     ('test_previous_sibling',
                                                                      [],
                                                                      ''),
                                                                     ('test_previous_sibling_may_not_exist',
                                                                      [],
                                                                      ''),
                                                                     ('test_find_previous_sibling',
                                                                      [],
                                                                      ''),
                                                                     ('test_previous_siblings',
                                                                      [],
                                                                      ''),
                                                                     ('test_previous_sibling_for_text_element',
                                                                      [],
                                                                      '')],
                                                         'properties': ['end']},
             'bs4.tests.test_tree.TestSoupSelector': {'bases': ['bs4.tests.test_tree.TreeTest'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('setUp', [], ''),
                                                                  ('assertSelects',
                                                                   ['selector',
                                                                    'expected_ids'],
                                                                   ''),
                                                                  ('assertSelectMultiple',
                                                                   ['*tests'],
                                                                   ''),
                                                                  ('test_one_tag_one', [], ''),
                                                                  ('test_one_tag_many', [], ''),
                                                                  ('test_select_one_returns_none_if_no_match',
                                                                   [],
                                                                   ''),
                                                                  ('test_tag_in_tag_one',
                                                                   [],
                                                                   ''),
                                                                  ('test_tag_in_tag_many',
                                                                   [],
                                                                   ''),
                                                                  ('test_tag_no_match', [], ''),
                                                                  ('test_invalid_tag', [], ''),
                                                                  ('test_select_dashed_tag_ids',
                                                                   [],
                                                                   ''),
                                                                  ('test_select_dashed_by_id',
                                                                   [],
                                                                   ''),
                                                                  ('test_dashed_tag_text',
                                                                   [],
                                                                   ''),
                                                                  ('test_select_dashed_matches_find_all',
                                                                   [],
                                                                   ''),
                                                                  ('test_header_tags', [], ''),
                                                                  ('test_class_one', [], ''),
                                                                  ('test_class_mismatched_tag',
                                                                   [],
                                                                   ''),
                                                                  ('test_one_id', [], ''),
                                                                  ('test_bad_id', [], ''),
                                                                  ('test_items_in_id', [], ''),
                                                                  ('test_a_bunch_of_emptys',
                                                                   [],
                                                                   ''),
                                                                  ('test_multi_class_support',
                                                                   [],
                                                                   ''),
                                                                  ('test_multi_class_selection',
                                                                   [],
                                                                   ''),
                                                                  ('test_child_selector',
                                                                   [],
                                                                   ''),
                                                                  ('test_child_selector_id',
                                                                   [],
                                                                   ''),
                                                                  ('test_attribute_equals',
                                                                   [],
                                                                   ''),
                                                                  ('test_attribute_tilde',
                                                                   [],
                                                                   ''),
                                                                  ('test_attribute_startswith',
                                                                   [],
                                                                   ''),
                                                                  ('test_attribute_endswith',
                                                                   [],
                                                                   ''),
                                                                  ('test_attribute_contains',
                                                                   [],
                                                                   ''),
                                                                  ('test_attribute_exact_or_hypen',
                                                                   [],
                                                                   ''),
                                                                  ('test_attribute_exists',
                                                                   [],
                                                                   ''),
                                                                  ('test_unsupported_pseudoclass',
                                                                   [],
                                                                   ''),
                                                                  ('test_nth_of_type', [], ''),
                                                                  ('test_nth_of_type_direct_descendant',
                                                                   [],
                                                                   ''),
                                                                  ('test_id_child_selector_nth_of_type',
                                                                   [],
                                                                   ''),
                                                                  ('test_select_on_element',
                                                                   [],
                                                                   ''),
                                                                  ('test_overspecified_child_id',
                                                                   [],
                                                                   ''),
                                                                  ('test_adjacent_sibling_selector',
                                                                   [],
                                                                   ''),
                                                                  ('test_general_sibling_selector',
                                                                   [],
                                                                   ''),
                                                                  ('test_dangling_combinator',
                                                                   [],
                                                                   ''),
                                                                  ('test_sibling_combinator_wont_select_same_tag_twice',
                                                                   [],
                                                                   ''),
                                                                  ('test_multiple_select',
                                                                   [],
                                                                   ''),
                                                                  ('test_multiple_select_with_no_space',
                                                                   [],
                                                                   ''),
                                                                  ('test_multiple_select_with_more_space',
                                                                   [],
                                                                   ''),
                                                                  ('test_multiple_select_duplicated',
                                                                   [],
                                                                   ''),
                                                                  ('test_multiple_select_sibling',
                                                                   [],
                                                                   ''),
                                                                  ('test_multiple_select_tag_and_direct_descendant',
                                                                   [],
                                                                   ''),
                                                                  ('test_multiple_select_direct_descendant_and_tags',
                                                                   [],
                                                                   ''),
                                                                  ('test_multiple_select_indirect_descendant',
                                                                   [],
                                                                   ''),
                                                                  ('test_invalid_multiple_select',
                                                                   [],
                                                                   ''),
                                                                  ('test_multiple_select_attrs',
                                                                   [],
                                                                   ''),
                                                                  ('test_multiple_select_ids',
                                                                   [],
                                                                   ''),
                                                                  ('test_multiple_select_nested',
                                                                   [],
                                                                   '')],
                                                      'properties': ['HTML',
                                                                     'soup',
                                                                     'assertSelect']},
             'bs4.tests.test_tree.TestSubstitutions': {'bases': ['bs4.testing.SoupTest'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('test_default_formatter_is_minimal',
                                                                    [],
                                                                    ''),
                                                                   ('test_formatter_html',
                                                                    [],
                                                                    ''),
                                                                   ('test_formatter_minimal',
                                                                    [],
                                                                    ''),
                                                                   ('test_formatter_null',
                                                                    [],
                                                                    ''),
                                                                   ('test_formatter_custom',
                                                                    [],
                                                                    ''),
                                                                   ('test_formatter_is_run_on_attribute_values',
                                                                    [],
                                                                    ''),
                                                                   ('test_formatter_skips_script_tag_for_html_documents',
                                                                    [],
                                                                    ''),
                                                                   ('test_formatter_skips_style_tag_for_html_documents',
                                                                    [],
                                                                    ''),
                                                                   ('test_prettify_leaves_preformatted_text_alone',
                                                                    [],
                                                                    ''),
                                                                   ('test_prettify_accepts_formatter',
                                                                    [],
                                                                    ''),
                                                                   ('test_prettify_outputs_unicode_by_default',
                                                                    [],
                                                                    ''),
                                                                   ('test_prettify_can_encode_data',
                                                                    [],
                                                                    ''),
                                                                   ('test_html_entity_substitution_off_by_default',
                                                                    [],
                                                                    ''),
                                                                   ('test_encoding_substitution',
                                                                    [],
                                                                    ''),
                                                                   ('test_encoding_substitution_doesnt_happen_if_tag_is_strained',
                                                                    [],
                                                                    '')],
                                                       'properties': []},
             'bs4.tests.test_tree.TestTagCreation': {'bases': ['bs4.testing.SoupTest'],
                                                     'constructor': [],
                                                     'docstring': 'Test the ability to create new tags.',
                                                     'methods': [('test_new_tag', [], ''),
                                                                 ('test_tag_inherits_self_closing_rules_from_builder',
                                                                  [],
                                                                  ''),
                                                                 ('test_new_string_creates_navigablestring',
                                                                  [],
                                                                  ''),
                                                                 ('test_new_string_can_create_navigablestring_subclass',
                                                                  [],
                                                                  '')],
                                                     'properties': []},
             'bs4.tests.test_tree.TestTreeModification': {'bases': ['bs4.testing.SoupTest'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('test_attribute_modification',
                                                                       [],
                                                                       ''),
                                                                      ('test_new_tag_creation',
                                                                       [],
                                                                       ''),
                                                                      ('test_append_to_contents_moves_tag',
                                                                       [],
                                                                       ''),
                                                                      ('test_replace_with_returns_thing_that_was_replaced',
                                                                       [],
                                                                       ''),
                                                                      ('test_unwrap_returns_thing_that_was_replaced',
                                                                       [],
                                                                       ''),
                                                                      ('test_replace_with_and_unwrap_give_useful_exception_when_tag_has_no_parent',
                                                                       [],
                                                                       ''),
                                                                      ('test_replace_tag_with_itself',
                                                                       [],
                                                                       ''),
                                                                      ('test_replace_tag_with_its_parent_raises_exception',
                                                                       [],
                                                                       ''),
                                                                      ('test_insert_tag_into_itself_raises_exception',
                                                                       [],
                                                                       ''),
                                                                      ('test_replace_with_maintains_next_element_throughout',
                                                                       [],
                                                                       ''),
                                                                      ('test_replace_final_node',
                                                                       [],
                                                                       ''),
                                                                      ('test_consecutive_text_nodes',
                                                                       [],
                                                                       ''),
                                                                      ('test_insert_string',
                                                                       [],
                                                                       ''),
                                                                      ('test_insert_tag',
                                                                       [],
                                                                       ''),
                                                                      ('test_append_child_thats_already_at_the_end',
                                                                       [],
                                                                       ''),
                                                                      ('test_move_tag_to_beginning_of_parent',
                                                                       [],
                                                                       ''),
                                                                      ('test_insert_works_on_empty_element_tag',
                                                                       [],
                                                                       ''),
                                                                      ('test_insert_before',
                                                                       [],
                                                                       ''),
                                                                      ('test_insert_after',
                                                                       [],
                                                                       ''),
                                                                      ('test_insert_after_raises_exception_if_after_has_no_meaning',
                                                                       [],
                                                                       ''),
                                                                      ('test_insert_before_raises_notimplementederror_if_before_has_no_meaning',
                                                                       [],
                                                                       ''),
                                                                      ('test_replace_with',
                                                                       [],
                                                                       ''),
                                                                      ('test_replace_first_child',
                                                                       [],
                                                                       ''),
                                                                      ('test_replace_last_child',
                                                                       [],
                                                                       ''),
                                                                      ('test_nested_tag_replace_with',
                                                                       [],
                                                                       ''),
                                                                      ('test_unwrap', [], ''),
                                                                      ('test_wrap', [], ''),
                                                                      ('test_wrap_extracts_tag_from_elsewhere',
                                                                       [],
                                                                       ''),
                                                                      ('test_wrap_puts_new_contents_at_the_end',
                                                                       [],
                                                                       ''),
                                                                      ('test_extract', [], ''),
                                                                      ('test_extract_distinguishes_between_identical_strings',
                                                                       [],
                                                                       ''),
                                                                      ('test_extract_multiples_of_same_tag',
                                                                       [],
                                                                       ''),
                                                                      ('test_extract_works_when_element_is_surrounded_by_identical_strings',
                                                                       [],
                                                                       ''),
                                                                      ('test_clear',
                                                                       [],
                                                                       'Tag.clear()'),
                                                                      ('test_string_set',
                                                                       [],
                                                                       "Tag.string = 'string'"),
                                                                      ('test_string_set_does_not_affect_original_string',
                                                                       [],
                                                                       ''),
                                                                      ('test_set_string_preserves_class_of_string',
                                                                       [],
                                                                       '')],
                                                          'properties': []},
             'bs4.tests.test_tree.TreeTest': {'bases': ['bs4.testing.SoupTest'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('assertSelects',
                                                           ['tags', 'should_match'],
                                                           'Make sure that the given tags have the correct text.\n\n        This is used in tests that define a bunch of tags, each\n        containing a single string, and then select certain strings by\n        some mechanism.\n        '),
                                                          ('assertSelectsIDs',
                                                           ['tags', 'should_match'],
                                                           'Make sure that the given tags have the correct IDs.\n\n        This is used in tests that define a bunch of tags, each\n        containing a single string, and then select certain strings by\n        some mechanism.\n        ')],
                                              'properties': []},
             'cloudstorage.api_utils.RetryParams': {'bases': ['object'],
                                                    'constructor': ['backoff_factor=2.0',
                                                                    'initial_delay=0.1',
                                                                    'max_delay=10.0',
                                                                    'min_retries=3',
                                                                    'max_retries=6',
                                                                    'max_retry_period=30.0',
                                                                    'urlfetch_timeout=None',
                                                                    'save_access_token=False',
                                                                    '_user_agent=None'],
                                                    'docstring': 'Retry configuration parameters.',
                                                    'methods': [('__eq__', ['other'], ''),
                                                                ('__ne__', ['other'], ''),
                                                                ('_check',
                                                                 ['name',
                                                                  'val',
                                                                  'can_be_zero=False',
                                                                  'val_type=float'],
                                                                 'Check init arguments.\n\n    Args:\n      name: name of the argument. For logging purpose.\n      val: value. Value has to be non negative number.\n      can_be_zero: whether value can be zero.\n      val_type: Python type of the value.\n\n    Returns:\n      The value.\n\n    Raises:\n      ValueError: when invalid value is passed in.\n      TypeError: when invalid value type is passed in.\n    '),
                                                                ('belong_to_current_request',
                                                                 [],
                                                                 ''),
                                                                ('delay',
                                                                 ['n', 'start_time'],
                                                                 'Calculate delay before the next retry.\n\n    Args:\n      n: the number of current attempt. The first attempt should be 1.\n      start_time: the time when retry started in unix time.\n\n    Returns:\n      Number of seconds to wait before next retry. -1 if retry should give up.\n    ')],
                                                    'properties': ['_DEFAULT_USER_AGENT',
                                                                   'backoff_factor',
                                                                   'initial_delay',
                                                                   'max_delay',
                                                                   'max_retry_period',
                                                                   'max_retries',
                                                                   'min_retries',
                                                                   'urlfetch_timeout',
                                                                   'save_access_token',
                                                                   '_user_agent',
                                                                   '_request_id']},
             'cloudstorage.api_utils._RetryWrapper': {'bases': ['object'],
                                                      'constructor': ['retry_params',
                                                                      'retriable_exceptions=_RETRIABLE_EXCEPTIONS',
                                                                      'should_retry=lambda r: False'],
                                                      'docstring': 'A wrapper that wraps retry logic around any tasklet.',
                                                      'methods': [('run',
                                                                   ['tasklet', '**kwds'],
                                                                   'Run a tasklet with retry.\n\n    The retry should be transparent to the caller: if no results\n    are successful, the exception or result from the last retry is returned\n    to the caller.\n\n    Args:\n      tasklet: the tasklet to run.\n      **kwds: keywords arguments to run the tasklet.\n\n    Raises:\n      The exception from running the tasklet.\n\n    Returns:\n      The result from running the tasklet.\n    ')],
                                                      'properties': ['retry_params',
                                                                     'retriable_exceptions',
                                                                     'should_retry']},
             'cloudstorage.cloudstorage_api._Bucket': {'bases': ['object'],
                                                       'constructor': ['api', 'path', 'options'],
                                                       'docstring': 'A wrapper for a GCS bucket as the return value of listbucket.',
                                                       'methods': [('_init',
                                                                    ['api', 'path', 'options'],
                                                                    ''),
                                                                   ('__getstate__', [], ''),
                                                                   ('__setstate__',
                                                                    ['state'],
                                                                    ''),
                                                                   ('__iter__',
                                                                    [],
                                                                    'Iter over the bucket.\n\n    Yields:\n      GCSFileStat: a GCSFileStat for an object in the bucket.\n        They are ordered by GCSFileStat.filename.\n    '),
                                                                   ('_next_file_gen',
                                                                    ['root'],
                                                                    'Generator for next file element in the document.\n\n    Args:\n      root: root element of the XML tree.\n\n    Yields:\n      GCSFileStat for the next file.\n    '),
                                                                   ('_next_dir_gen',
                                                                    ['root'],
                                                                    'Generator for next directory element in the document.\n\n    Args:\n      root: root element in the XML tree.\n\n    Yields:\n      GCSFileStat for the next directory.\n    '),
                                                                   ('_should_get_another_batch',
                                                                    ['content'],
                                                                    'Whether to issue another GET bucket call.\n\n    Args:\n      content: response XML.\n\n    Returns:\n      True if should, also update self._options for the next request.\n      False otherwise.\n    '),
                                                                   ('_find_elements',
                                                                    ['result', 'elements'],
                                                                    'Find interesting elements from XML.\n\n    This function tries to only look for specified elements\n    without parsing the entire XML. The specified elements is better\n    located near the beginning.\n\n    Args:\n      result: response XML.\n      elements: a set of interesting element tags.\n\n    Returns:\n      A dict from element tag to element value.\n    ')],
                                                       'properties': ['_api',
                                                                      '_path',
                                                                      '_options',
                                                                      '_get_bucket_fut',
                                                                      '_last_yield',
                                                                      '_new_max_keys']},
             'cloudstorage.common.GCSFileStat': {'bases': ['object'],
                                                 'constructor': ['filename',
                                                                 'st_size',
                                                                 'etag',
                                                                 'st_ctime',
                                                                 'content_type=None',
                                                                 'metadata=None',
                                                                 'is_dir=False'],
                                                 'docstring': 'Container for GCS file stat.',
                                                 'methods': [('__repr__', [], ''),
                                                             ('__cmp__', ['other'], ''),
                                                             ('__hash__', [], '')],
                                                 'properties': ['filename',
                                                                'is_dir',
                                                                'st_size',
                                                                'st_ctime',
                                                                'etag',
                                                                'content_type',
                                                                'metadata']},
             'cloudstorage.errors.AuthorizationError': {'bases': ['cloudstorage.errors.FatalError'],
                                                        'constructor': [],
                                                        'docstring': 'HTTP 401 authentication required.\n\n  Unauthorized request has been received by GCS.\n\n  This error is mostly handled by GCS client. GCS client will request\n  a new access token and retry the request.\n  ',
                                                        'methods': [],
                                                        'properties': []},
             'cloudstorage.errors.Error': {'bases': ['Exception'],
                                           'constructor': [],
                                           'docstring': 'Base error for all gcs operations.\n\n  Error can happen on GAE side or GCS server side.\n  For details on a particular GCS HTTP response code, see\n  https://developers.google.com/storage/docs/reference-status#standardcodes\n  ',
                                           'methods': [],
                                           'properties': []},
             'cloudstorage.errors.FatalError': {'bases': ['cloudstorage.errors.Error'],
                                                'constructor': [],
                                                'docstring': "FatalError shouldn't be retried.",
                                                'methods': [],
                                                'properties': []},
             'cloudstorage.errors.FileClosedError': {'bases': ['cloudstorage.errors.FatalError'],
                                                     'constructor': [],
                                                     'docstring': "File is already closed.\n\n  This can happen when the upload has finished but 'write' is called on\n  a stale upload handle.\n  ",
                                                     'methods': [],
                                                     'properties': []},
             'cloudstorage.errors.ForbiddenError': {'bases': ['cloudstorage.errors.FatalError'],
                                                    'constructor': [],
                                                    'docstring': 'HTTP 403 Forbidden.\n\n  While GCS replies with a 403 error for many reasons, the most common one\n  is due to bucket permission not correctly setup for your app to access.\n  ',
                                                    'methods': [],
                                                    'properties': []},
             'cloudstorage.errors.InvalidRange': {'bases': ['cloudstorage.errors.FatalError'],
                                                  'constructor': [],
                                                  'docstring': 'HTTP 416 RequestRangeNotSatifiable.',
                                                  'methods': [],
                                                  'properties': []},
             'cloudstorage.errors.NotFoundError': {'bases': ['cloudstorage.errors.FatalError'],
                                                   'constructor': [],
                                                   'docstring': 'HTTP 404 resource not found.',
                                                   'methods': [],
                                                   'properties': []},
             'cloudstorage.errors.ServerError': {'bases': ['cloudstorage.errors.TransientError'],
                                                 'constructor': [],
                                                 'docstring': 'HTTP >= 500 server side error.',
                                                 'methods': [],
                                                 'properties': []},
             'cloudstorage.errors.TimeoutError': {'bases': ['cloudstorage.errors.TransientError'],
                                                  'constructor': [],
                                                  'docstring': 'HTTP 408 timeout.',
                                                  'methods': [],
                                                  'properties': []},
             'cloudstorage.errors.TransientError': {'bases': ['cloudstorage.errors.Error'],
                                                    'constructor': [],
                                                    'docstring': 'TransientError could be retried.',
                                                    'methods': [],
                                                    'properties': []},
             'cloudstorage.rest_api._AE_TokenStorage_': {'bases': ['google.appengine.ext.ndb.Model'],
                                                         'constructor': [],
                                                         'docstring': 'Entity to store app_identity tokens in memcache.',
                                                         'methods': [],
                                                         'properties': ['token', 'expires']},
             'cloudstorage.rest_api._RestApi': {'bases': ['object'],
                                                'constructor': ['scopes',
                                                                'service_account_id=None',
                                                                'token_maker=None',
                                                                'retry_params=None'],
                                                'docstring': "Base class for REST-based API wrapper classes.\n\n  This class manages authentication tokens and request retries.  All\n  APIs are available as synchronous and async methods; synchronous\n  methods are synthesized from async ones by the add_sync_methods()\n  function in this module.\n\n  WARNING: Do NOT directly use this api. It's an implementation detail\n  and is subject to change at any release.\n  ",
                                                'methods': [('__getstate__',
                                                             [],
                                                             'Store state as part of serialization/pickling.'),
                                                            ('__setstate__',
                                                             ['state'],
                                                             'Restore state as part of deserialization/unpickling.'),
                                                            ('do_request_async',
                                                             ['url',
                                                              "method='GET'",
                                                              'headers=None',
                                                              'payload=None',
                                                              'deadline=None',
                                                              'callback=None'],
                                                             'Issue one HTTP request.\n\n    It performs async retries using tasklets.\n\n    Args:\n      url: the url to fetch.\n      method: the method in which to fetch.\n      headers: the http headers.\n      payload: the data to submit in the fetch.\n      deadline: the deadline in which to make the call.\n      callback: the call to make once completed.\n\n    Yields:\n      The async fetch of the url.\n    '),
                                                            ('get_token_async',
                                                             ['refresh=False'],
                                                             'Get an authentication token.\n\n    The token is cached in memcache, keyed by the scopes argument.\n    Uses a random token expiration headroom value generated in the constructor\n    to eliminate a burst of GET_ACCESS_TOKEN API requests.\n\n    Args:\n      refresh: If True, ignore a cached token; default False.\n\n    Yields:\n      An authentication token. This token is guaranteed to be non-expired.\n    '),
                                                            ('urlfetch_async',
                                                             ['url',
                                                              "method='GET'",
                                                              'headers=None',
                                                              'payload=None',
                                                              'deadline=None',
                                                              'callback=None',
                                                              'follow_redirects=False'],
                                                             'Make an async urlfetch() call.\n\n    This is an async wrapper around urlfetch(). It adds an authentication\n    header.\n\n    Args:\n      url: the url to fetch.\n      method: the method in which to fetch.\n      headers: the http headers.\n      payload: the data to submit in the fetch.\n      deadline: the deadline in which to make the call.\n      callback: the call to make once completed.\n      follow_redirects: whether or not to follow redirects.\n\n    Yields:\n      This returns a Future despite not being decorated with @ndb.tasklet!\n    ')],
                                                'properties': ['scopes',
                                                               'service_account_id',
                                                               'make_token_async',
                                                               'retry_params',
                                                               'user_agent',
                                                               'expiration_headroom',
                                                               'token']},
             'cloudstorage.storage_api.ReadBuffer': {'bases': ['object'],
                                                     'constructor': ['api',
                                                                     'path',
                                                                     'buffer_size=DEFAULT_BUFFER_SIZE',
                                                                     'max_request_size=MAX_REQUEST_SIZE'],
                                                     'docstring': 'A class for reading Google storage files.',
                                                     'methods': [('__getstate__',
                                                                  [],
                                                                  'Store state as part of serialization/pickling.\n\n    The contents of the read buffer are not stored, only the current offset for\n    data read by the client. A new read buffer is established at unpickling.\n    The head information for the object (file size and etag) are stored to\n    reduce startup and ensure the file has not changed.\n\n    Returns:\n      A dictionary with the state of this object\n    '),
                                                                 ('__setstate__',
                                                                  ['state'],
                                                                  'Restore state as part of deserialization/unpickling.\n\n    Args:\n      state: the dictionary from a __getstate__ call\n\n    Along with restoring the state, pre-fetch the next read buffer.\n    '),
                                                                 ('__iter__',
                                                                  [],
                                                                  "Iterator interface.\n\n    Note the ReadBuffer container itself is the iterator. It's\n    (quote PEP0234)\n    'destructive: they consumes all the values and a second iterator\n    cannot easily be created that iterates independently over the same values.\n    You could open the file for the second time, or seek() to the beginning.'\n\n    Returns:\n      Self.\n    "),
                                                                 ('next', [], ''),
                                                                 ('readline',
                                                                  ['size=-1'],
                                                                  "Read one line delimited by '\n' from the file.\n\n    A trailing newline character is kept in the string. It may be absent when a\n    file ends with an incomplete line. If the size argument is non-negative,\n    it specifies the maximum string size (counting the newline) to return.\n    A negative size is the same as unspecified. Empty string is returned\n    only when EOF is encountered immediately.\n\n    Args:\n      size: Maximum number of bytes to read. If not specified, readline stops\n        only on '\n' or EOF.\n\n    Returns:\n      The data read as a string.\n\n    Raises:\n      IOError: When this buffer is closed.\n    "),
                                                                 ('read',
                                                                  ['size=-1'],
                                                                  'Read data from RAW file.\n\n    Args:\n      size: Number of bytes to read as integer. Actual number of bytes\n        read is always equal to size unless EOF is reached. If size is\n        negative or unspecified, read the entire file.\n\n    Returns:\n      data read as str.\n\n    Raises:\n      IOError: When this buffer is closed.\n    '),
                                                                 ('_remaining', [], ''),
                                                                 ('_request_next_buffer',
                                                                  [],
                                                                  'Request next buffer.\n\n    Requires self._offset and self._buffer are in consistent state.\n    '),
                                                                 ('_get_segments',
                                                                  ['start', 'request_size'],
                                                                  'Get segments of the file from Google Storage as a list.\n\n    A large request is broken into segments to avoid hitting urlfetch\n    response size limit. Each segment is returned from a separate urlfetch.\n\n    Args:\n      start: start offset to request. Inclusive. Have to be within the\n        range of the file.\n      request_size: number of bytes to request.\n\n    Returns:\n      A list of file segments in order\n    '),
                                                                 ('_get_segment',
                                                                  ['start',
                                                                   'request_size',
                                                                   'check_response=True'],
                                                                  'Get a segment of the file from Google Storage.\n\n    Args:\n      start: start offset of the segment. Inclusive. Have to be within the\n        range of the file.\n      request_size: number of bytes to request. Have to be small enough\n        for a single urlfetch request. May go over the logical range of the\n        file.\n      check_response: True to check the validity of GCS response automatically\n        before the future returns. False otherwise. See Yields section.\n\n    Yields:\n      If check_response is True, the segment [start, start + request_size)\n      of the file.\n      Otherwise, a tuple. The first element is the unverified file segment.\n      The second element is a closure that checks response. Caller should\n      first invoke the closure before consuing the file segment.\n\n    Raises:\n      ValueError: if the file has changed while reading.\n    '),
                                                                 ('_check_etag',
                                                                  ['etag'],
                                                                  'Check if etag is the same across requests to GCS.\n\n    If self._etag is None, set it. If etag is set, check that the new\n    etag equals the old one.\n\n    In the __init__ method, we fire one HEAD and one GET request using\n    ndb tasklet. One of them would return first and set the first value.\n\n    Args:\n      etag: etag from a GCS HTTP response. None if etag is not part of the\n        response header. It could be None for example in the case of GCS\n        composite file.\n\n    Raises:\n      ValueError: if two etags are not equal.\n    '),
                                                                 ('close', [], ''),
                                                                 ('__enter__', [], ''),
                                                                 ('__exit__',
                                                                  ['atype',
                                                                   'value',
                                                                   'traceback'],
                                                                  ''),
                                                                 ('seek',
                                                                  ['offset',
                                                                   'whence=os.SEEK_SET'],
                                                                  "Set the file's current offset.\n\n    Note if the new offset is out of bound, it is adjusted to either 0 or EOF.\n\n    Args:\n      offset: seek offset as number.\n      whence: seek mode. Supported modes are os.SEEK_SET (absolute seek),\n        os.SEEK_CUR (seek relative to the current position), and os.SEEK_END\n        (seek relative to the end, offset should be negative).\n\n    Raises:\n      IOError: When this buffer is closed.\n      ValueError: When whence is invalid.\n    "),
                                                                 ('tell',
                                                                  [],
                                                                  "Tell the file's current offset.\n\n    Returns:\n      current offset in reading this file.\n\n    Raises:\n      IOError: When this buffer is closed.\n    "),
                                                                 ('_check_open', [], ''),
                                                                 ('seekable', [], ''),
                                                                 ('readable', [], ''),
                                                                 ('writable', [], '')],
                                                     'properties': ['DEFAULT_BUFFER_SIZE',
                                                                    'MAX_REQUEST_SIZE',
                                                                    '_api',
                                                                    '_path',
                                                                    'name',
                                                                    'closed',
                                                                    '_buffer_size',
                                                                    '_max_request_size',
                                                                    '_offset',
                                                                    '_buffer',
                                                                    '_etag',
                                                                    '_file_size',
                                                                    '_buffer_future']},
             'cloudstorage.storage_api.StreamingBuffer': {'bases': ['object'],
                                                          'constructor': ['api',
                                                                          'path',
                                                                          'content_type=None',
                                                                          'gcs_headers=None'],
                                                          'docstring': "A class for creating large objects using the 'resumable' API.\n\n  The API is a subset of the Python writable stream API sufficient to\n  support writing zip files using the zipfile module.\n\n  The exact sequence of calls and use of headers is documented at\n  https://developers.google.com/storage/docs/developer-guide#unknownresumables\n  ",
                                                          'methods': [('__getstate__',
                                                                       [],
                                                                       'Store state as part of serialization/pickling.\n\n    The contents of the write buffer are stored. Writes to the underlying\n    storage are required to be on block boundaries (_blocksize) except for the\n    last write. In the worst case the pickled version of this object may be\n    slightly larger than the blocksize.\n\n    Returns:\n      A dictionary with the state of this object\n\n    '),
                                                                      ('__setstate__',
                                                                       ['state'],
                                                                       'Restore state as part of deserialization/unpickling.\n\n    Args:\n      state: the dictionary from a __getstate__ call\n    '),
                                                                      ('write',
                                                                       ['data'],
                                                                       'Write some bytes.\n\n    Args:\n      data: data to write. str.\n\n    Raises:\n      TypeError: if data is not of type str.\n    '),
                                                                      ('flush',
                                                                       [],
                                                                       'Flush as much as possible to GCS.\n\n    GCS *requires* that all writes except for the final one align on\n    256KB boundaries. So the internal buffer may still have < 256KB bytes left\n    after flush.\n    '),
                                                                      ('tell',
                                                                       [],
                                                                       'Return the total number of bytes passed to write() so far.\n\n    (There is no seek() method.)\n    '),
                                                                      ('close',
                                                                       [],
                                                                       'Flush the buffer and finalize the file.\n\n    When this returns the new file is available for reading.\n    '),
                                                                      ('__enter__', [], ''),
                                                                      ('__exit__',
                                                                       ['atype',
                                                                        'value',
                                                                        'traceback'],
                                                                       ''),
                                                                      ('_flush',
                                                                       ['finish=False'],
                                                                       'Internal API to flush.\n\n    Buffer is flushed to GCS only when the total amount of buffered data is at\n    least self._blocksize, or to flush the final (incomplete) block of\n    the file with finish=True.\n    '),
                                                                      ('_send_data',
                                                                       ['data',
                                                                        'start_offset',
                                                                        'file_len'],
                                                                       "Send the block to the storage service.\n\n    This is a utility method that does not modify self.\n\n    Args:\n      data: data to send in str.\n      start_offset: start offset of the data in relation to the file.\n      file_len: an int if this is the last data to append to the file.\n        Otherwise '*'.\n    "),
                                                                      ('_get_offset_from_gcs',
                                                                       [],
                                                                       'Get the last offset that has been written to GCS.\n\n    This is a utility method that does not modify self.\n\n    Returns:\n      an int of the last offset written to GCS by this upload, inclusive.\n      -1 means nothing has been written.\n    '),
                                                                      ('_force_close',
                                                                       ['file_length=None'],
                                                                       'Close this buffer on file_length.\n\n    Finalize this upload immediately on file_length.\n    Contents that are still in memory will not be uploaded.\n\n    This is a utility method that does not modify self.\n\n    Args:\n      file_length: file length. Must match what has been uploaded. If None,\n        it will be queried from GCS.\n    '),
                                                                      ('_check_open', [], ''),
                                                                      ('seekable', [], ''),
                                                                      ('readable', [], ''),
                                                                      ('writable', [], '')],
                                                          'properties': ['_blocksize',
                                                                         '_flushsize',
                                                                         '_maxrequestsize',
                                                                         '_api',
                                                                         '_path',
                                                                         'name',
                                                                         'closed',
                                                                         '_buffer',
                                                                         '_buffered',
                                                                         '_written',
                                                                         '_offset',
                                                                         '_path_with_token']},
             'cloudstorage.storage_api._Buffer': {'bases': ['object'],
                                                  'constructor': [],
                                                  'docstring': 'In memory buffer.',
                                                  'methods': [('reset',
                                                               ["content=''", 'offset=0'],
                                                               ''),
                                                              ('read',
                                                               ['size=-1'],
                                                               'Returns bytes from self._buffer and update related offsets.\n\n    Args:\n      size: number of bytes to read starting from current offset.\n        Read the entire buffer if negative.\n\n    Returns:\n      Requested bytes from buffer.\n    '),
                                                              ('read_to_offset',
                                                               ['offset'],
                                                               'Returns bytes from self._buffer and update related offsets.\n\n    Args:\n      offset: read from current offset to this offset, exclusive.\n\n    Returns:\n      Requested bytes from buffer.\n    '),
                                                              ('remaining', [], ''),
                                                              ('find_newline',
                                                               ['size=-1'],
                                                               "Search for newline char in buffer starting from current offset.\n\n    Args:\n      size: number of bytes to search. -1 means all.\n\n    Returns:\n      offset of newline char in buffer. -1 if doesn't exist.\n    ")],
                                                  'properties': ['_buffer', '_offset']},
             'cloudstorage.storage_api._StorageApi': {'bases': ['.rest_api._RestApi'],
                                                      'constructor': [],
                                                      'docstring': "A simple wrapper for the Google Storage RESTful API.\n\n  WARNING: Do NOT directly use this api. It's an implementation detail\n  and is subject to change at any release.\n\n  All async methods have similar args and returns.\n\n  Args:\n    path: The path to the Google Storage object or bucket, e.g.\n      '/mybucket/myfile' or '/mybucket'.\n    **kwd: Options for urlfetch. e.g.\n      headers={'content-type': 'text/plain'}, payload='blah'.\n\n  Returns:\n    A ndb Future. When fulfilled, future.get_result() should return\n    a tuple of (status, headers, content) that represents a HTTP response\n    of Google Cloud Storage XML API.\n  ",
                                                      'methods': [('__getstate__',
                                                                   [],
                                                                   'Store state as part of serialization/pickling.\n\n    Returns:\n      A tuple (of dictionaries) with the state of this object\n    '),
                                                                  ('__setstate__',
                                                                   ['state'],
                                                                   'Restore state as part of deserialization/unpickling.\n\n    Args:\n      state: the tuple from a __getstate__ call\n    '),
                                                                  ('do_request_async',
                                                                   ['url',
                                                                    "method='GET'",
                                                                    'headers=None',
                                                                    'payload=None',
                                                                    'deadline=None',
                                                                    'callback=None'],
                                                                   'Inherit docs.\n\n    This method translates urlfetch exceptions to more service specific ones.\n    '),
                                                                  ('post_object_async',
                                                                   ['path', '**kwds'],
                                                                   'POST to an object.'),
                                                                  ('put_object_async',
                                                                   ['path', '**kwds'],
                                                                   'PUT an object.'),
                                                                  ('get_object_async',
                                                                   ['path', '**kwds'],
                                                                   'GET an object.\n\n    Note: No payload argument is supported.\n    '),
                                                                  ('delete_object_async',
                                                                   ['path', '**kwds'],
                                                                   'DELETE an object.\n\n    Note: No payload argument is supported.\n    '),
                                                                  ('head_object_async',
                                                                   ['path', '**kwds'],
                                                                   'HEAD an object.\n\n    Depending on request headers, HEAD returns various object properties,\n    e.g. Content-Length, Last-Modified, and ETag.\n\n    Note: No payload argument is supported.\n    '),
                                                                  ('get_bucket_async',
                                                                   ['path', '**kwds'],
                                                                   'GET a bucket.')],
                                                      'properties': ['api_url',
                                                                     'read_only_scope',
                                                                     'read_write_scope',
                                                                     'full_control_scope']},
             'cloudstorage.test_utils.MockUrlFetchResult': {'bases': ['object'],
                                                            'constructor': ['status',
                                                                            'headers',
                                                                            'body'],
                                                            'docstring': '',
                                                            'methods': [],
                                                            'properties': ['status_code',
                                                                           'headers',
                                                                           'content',
                                                                           'content_was_truncated',
                                                                           'final_url']},
             'main.MainHandler': {'bases': ['webapp2.RequestHandler'],
                                  'constructor': [],
                                  'docstring': '',
                                  'methods': [('get', [], '')],
                                  'properties': []},
             'push.ApplePushSandboxService': {'bases': ['push.ApplePushService'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('is_sandbox', [], '')],
                                              'properties': []},
             'push.ApplePushService': {'bases': ['push.PushService'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('send_applicable_pushes', ['pushes'], ''),
                                                   ('is_sandbox', [], '')],
                                       'properties': []},
             'push.Push': {'bases': ['object'],
                           'constructor': ['j', 'extra=None'],
                           'docstring': '',
                           'methods': [],
                           'properties': ['text', 'link', 'extra', 'recipients', 'custom']},
             'push.PushHandler': {'bases': ['webapp2.RequestHandler'],
                                  'constructor': [],
                                  'docstring': '',
                                  'methods': [('post', [], '')],
                                  'properties': []},
             'push.PushService': {'bases': ['object'],
                                  'constructor': ['name'],
                                  'docstring': '',
                                  'methods': [('send_applicable_pushes', ['pushes'], ''),
                                              ('send_pushes', ['pushes'], '')],
                                  'properties': ['name']},
             'site_preview.Handler': {'bases': ['webapp2.RequestHandler'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('get', [], '')],
                                      'properties': []},
             'test.ApplePushSandboxService': {'bases': ['test.ApplePushService'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('is_sandbox', [], '')],
                                              'properties': []},
             'test.ApplePushService': {'bases': ['test.PushService'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('send_applicable_pushes', ['pushes'], ''),
                                                   ('is_sandbox', [], '')],
                                       'properties': []},
             'test.Push': {'bases': ['object'],
                           'constructor': ['j', 'extra=None'],
                           'docstring': '',
                           'methods': [],
                           'properties': ['text', 'link', 'extra', 'recipients']},
             'test.PushService': {'bases': ['object'],
                                  'constructor': ['name'],
                                  'docstring': '',
                                  'methods': [('send_applicable_pushes', ['pushes'], ''),
                                              ('send_pushes', ['pushes'], '')],
                                  'properties': ['name']},
             'uploads.MirrorHandler': {'bases': ['webapp2.RequestHandler'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('get', [], '')],
                                       'properties': []},
             'uploads.RawUploadHandler': {'bases': ['webapp2.RequestHandler'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('post', [], '')],
                                          'properties': []},
             'uploads.UploadHandler': {'bases': ['webapp2.RequestHandler'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('post', [], ''), ('options', [], '')],
                                       'properties': []}},
 'CONSTANTS': ['apns._logger',
               'apns.MAX_PAYLOAD_LENGTH',
               'apns.NOTIFICATION_COMMAND',
               'apns.ENHANCED_NOTIFICATION_COMMAND',
               'apns.NOTIFICATION_FORMAT',
               'apns.ENHANCED_NOTIFICATION_FORMAT',
               'apns.ERROR_RESPONSE_FORMAT',
               'apns.TOKEN_LENGTH',
               'apns.ERROR_RESPONSE_LENGTH',
               'apns.DELAY_RESEND_SEC',
               'apns.SENT_BUFFER_QTY',
               'apns.WAIT_WRITE_TIMEOUT_SEC',
               'apns.WAIT_READ_TIMEOUT_SEC',
               'apns.WRITE_RETRY',
               'apns.ER_STATUS',
               'apns.ER_IDENTIFER',
               'main.app',
               'push.PUSH_SERVICES',
               'test.PUSH_SERVICES',
               'bs4.__author__',
               'bs4.__version__',
               'bs4.__copyright__',
               'bs4.__license__',
               'bs4.__all__',
               'bs4._s',
               'bs4._soup',
               'bs4.soup',
               'bs4.dammit.__license__',
               'bs4.dammit.chardet_type',
               'bs4.dammit.xml_encoding_re',
               'bs4.dammit.html_meta_re',
               'bs4.diagnose.__license__',
               'bs4.diagnose._vowels',
               'bs4.diagnose._consonants',
               'bs4.element.__license__',
               'bs4.element.DEFAULT_OUTPUT_ENCODING',
               'bs4.element.PY3K',
               'bs4.element.whitespace_re',
               'bs4.testing.__license__',
               'bs4.testing.default_builder',
               'bs4.builder.__all__',
               'bs4.builder.FAST',
               'bs4.builder.PERMISSIVE',
               'bs4.builder.STRICT',
               'bs4.builder.XML',
               'bs4.builder.HTML',
               'bs4.builder.HTML_5',
               'bs4.builder.builder_registry',
               'bs4.builder._html5lib.__all__',
               'bs4.builder._htmlparser.__all__',
               'bs4.builder._htmlparser.e',
               'bs4.builder._htmlparser.major',
               'bs4.builder._htmlparser.minor',
               'bs4.builder._htmlparser.release',
               'bs4.builder._htmlparser.CONSTRUCTOR_TAKES_STRICT',
               'bs4.builder._htmlparser.CONSTRUCTOR_STRICT_IS_DEPRECATED',
               'bs4.builder._htmlparser.CONSTRUCTOR_TAKES_CONVERT_CHARREFS',
               'bs4.builder._htmlparser.HTMLPARSER',
               'bs4.builder._htmlparser.attrfind_tolerant',
               'bs4.builder._htmlparser.locatestarttagend',
               'bs4.builder._htmlparser.CONSTRUCTOR_TAKES_STRICT',
               'bs4.builder._lxml.__all__',
               'bs4.builder._lxml.LXML',
               'bs4.tests.test_builder_registry.HTML5LIB_PRESENT',
               'bs4.tests.test_builder_registry.HTML5LIB_PRESENT',
               'bs4.tests.test_builder_registry.LXML_PRESENT',
               'bs4.tests.test_builder_registry.LXML_PRESENT',
               'bs4.tests.test_docs.__metaclass__',
               'bs4.tests.test_docs.__all__',
               'bs4.tests.test_docs.DOCTEST_FLAGS',
               'bs4.tests.test_html5lib.HTML5LIB_PRESENT',
               'bs4.tests.test_html5lib.e',
               'bs4.tests.test_html5lib.HTML5LIB_PRESENT',
               'bs4.tests.test_soup.LXML_PRESENT',
               'bs4.tests.test_soup.e',
               'bs4.tests.test_soup.LXML_PRESENT',
               'bs4.tests.test_soup.PYTHON_2_PRE_2_7',
               'bs4.tests.test_soup.PYTHON_3_PRE_3_2',
               'bs4.tests.test_tree.XML_BUILDER_PRESENT',
               'bs4.tests.test_tree.LXML_PRESENT',
               'cloudstorage.api_utils.__all__',
               'cloudstorage.api_utils._RETRIABLE_EXCEPTIONS',
               'cloudstorage.api_utils._thread_local_settings',
               'cloudstorage.cloudstorage_api.__all__',
               'cloudstorage.common.__all__',
               'cloudstorage.common._GCS_BUCKET_REGEX_BASE',
               'cloudstorage.common._GCS_BUCKET_REGEX',
               'cloudstorage.common._GCS_BUCKET_PATH_REGEX',
               'cloudstorage.common._GCS_PATH_PREFIX_REGEX',
               'cloudstorage.common._GCS_FULLPATH_REGEX',
               'cloudstorage.common._GCS_METADATA',
               'cloudstorage.common._GCS_OPTIONS',
               'cloudstorage.common.CS_XML_NS',
               'cloudstorage.common.LOCAL_GCS_ENDPOINT',
               'cloudstorage.common._access_token',
               'cloudstorage.common._MAX_GET_BUCKET_RESULT',
               'cloudstorage.common.CSFileStat',
               'cloudstorage.common._DT_FORMAT',
               'cloudstorage.common._T_CONTENTS',
               'cloudstorage.common._T_LAST_MODIFIED',
               'cloudstorage.common._T_ETAG',
               'cloudstorage.common._T_KEY',
               'cloudstorage.common._T_SIZE',
               'cloudstorage.common._T_PREFIX',
               'cloudstorage.common._T_COMMON_PREFIXES',
               'cloudstorage.common._T_NEXT_MARKER',
               'cloudstorage.common._T_IS_TRUNCATED',
               'cloudstorage.errors.__all__',
               'cloudstorage.rest_api.__all__',
               'cloudstorage.rest_api._RestApi',
               'cloudstorage.storage_api.__all__',
               'cloudstorage.storage_api._StorageApi'],
 'FUNCTIONS': [('file_storage.upload_file_and_get_url',
                ['data', "mimetype='application/octet-stream'"],
                ''),
               ('push.tokens_for_user_id', ['uid'], ''),
               ('site_preview.first', ['items'], ''),
               ('test.tokens_for_user_id', ['uid'], ''),
               ('util.url_fetch_async', ['url', 'callback', 'timeout=10'], ''),
               ('util.get_or_insert', ['cls', 'id', '**kwds'], ''),
               ('util.strip_url_prefix', ['url'], ''),
               ('util.first_present', ['items'], ''),
               ('util.url_fetch', ['url', 'timeout=10', 'return_response_obj=False'], ''),
               ('util.truncate', ['text', 'words=None'], ''),
               ('util.timestamp_from_datetime', ['adatetime'], ''),
               ('util.normalized_compare', ['string1', 'string2'], ''),
               ('util.deduplicate_json', ['items', 'keys'], ''),
               ('bs4.dammit.chardet_dammit', ['s'], ''),
               ('bs4.dammit.chardet_dammit', ['s'], ''),
               ('bs4.dammit.chardet_dammit', ['s'], ''),
               ('bs4.diagnose.diagnose',
                ['data'],
                'Diagnostic suite for isolating common problems.'),
               ('bs4.diagnose.lxml_trace',
                ['data', 'html=True', '**kwargs'],
                'Print out the lxml events that occur during parsing.\n\n    This lets you see how lxml parses a document when no Beautiful\n    Soup code is running.\n    '),
               ('bs4.diagnose.htmlparser_trace',
                ['data'],
                'Print out the HTMLParser events that occur during parsing.\n\n    This lets you see how HTMLParser parses a document when no\n    Beautiful Soup code is running.\n    '),
               ('bs4.diagnose.rword', ['length=5'], 'Generate a random word-like string.'),
               ('bs4.diagnose.rsentence',
                ['length=4'],
                'Generate a random sentence-like string.'),
               ('bs4.diagnose.rdoc',
                ['num_elements=1000'],
                'Randomly generate an invalid HTML document.'),
               ('bs4.diagnose.benchmark_parsers',
                ['num_elements=100000'],
                'Very basic head-to-head performance benchmark.'),
               ('bs4.diagnose.profile', ['num_elements=100000', "parser='lxml'"], ''),
               ('bs4.element._alias',
                ['attr'],
                'Alias one attribute name to another for backward compatibility'),
               ('bs4.testing.skipIf', ['condition', 'reason'], ''),
               ('bs4.builder.register_treebuilders_from',
                ['module'],
                'Copy TreeBuilders from the given module into this module.'),
               ('bs4.builder._htmlparser.parse_starttag', ['self', 'i'], ''),
               ('bs4.builder._htmlparser.set_cdata_mode', ['self', 'elem'], ''),
               ('cloudstorage.api_utils.set_default_retry_params',
                ['retry_params'],
                'Set a default RetryParams for current thread current request.'),
               ('cloudstorage.api_utils._get_default_retry_params',
                [],
                'Get default RetryParams for current request and current thread.\n\n  Returns:\n    A new instance of the default RetryParams.\n  '),
               ('cloudstorage.api_utils._quote_filename',
                ['filename'],
                "Quotes filename to use as a valid URI path.\n\n  Args:\n    filename: user provided filename. /bucket/filename.\n\n  Returns:\n    The filename properly quoted to use as URI's path component.\n  "),
               ('cloudstorage.api_utils._unquote_filename',
                ['filename'],
                'Unquotes a valid URI path back to its filename.\n\n  This is the opposite of _quote_filename.\n\n  Args:\n    filename: a quoted filename. /bucket/some%20filename.\n\n  Returns:\n    The filename unquoted.\n  '),
               ('cloudstorage.api_utils._should_retry',
                ['resp'],
                'Given a urlfetch response, decide whether to retry that request.'),
               ('cloudstorage.api_utils._run_until_rpc',
                [],
                "Eagerly evaluate tasklets until it is blocking on some RPC.\n\n  Usually ndb eventloop el isn't run until some code calls future.get_result().\n\n  When an async tasklet is called, the tasklet wrapper evaluates the tasklet\n  code into a generator, enqueues a callback _help_tasklet_along onto\n  the el.current queue, and returns a future.\n\n  _help_tasklet_along, when called by the el, will\n  get one yielded value from the generator. If the value if another future,\n  set up a callback _on_future_complete to invoke _help_tasklet_along\n  when the dependent future fulfills. If the value if a RPC, set up a\n  callback _on_rpc_complete to invoke _help_tasklet_along when the RPC fulfills.\n  Thus _help_tasklet_along drills down\n  the chain of futures until some future is blocked by RPC. El runs\n  all callbacks and constantly check pending RPC status.\n  "),
               ('cloudstorage.api_utils._eager_tasklet',
                ['tasklet'],
                'Decorator to turn tasklet to run eagerly.'),
               ('cloudstorage.cloudstorage_api.open',
                ['filename',
                 "mode='r'",
                 'content_type=None',
                 'options=None',
                 'read_buffer_size=storage_api.ReadBuffer.DEFAULT_BUFFER_SIZE',
                 'retry_params=None',
                 '_account_id=None'],
                "Opens a Google Cloud Storage file and returns it as a File-like object.\n\n  Args:\n    filename: A Google Cloud Storage filename of form '/bucket/filename'.\n    mode: 'r' for reading mode. 'w' for writing mode.\n      In reading mode, the file must exist. In writing mode, a file will\n      be created or be overrode.\n    content_type: The MIME type of the file. str. Only valid in writing mode.\n    options: A str->basestring dict to specify additional headers to pass to\n      GCS e.g. {'x-goog-acl': 'private', 'x-goog-meta-foo': 'foo'}.\n      Supported options are x-goog-acl, x-goog-meta-, cache-control,\n      content-disposition, and content-encoding.\n      Only valid in writing mode.\n      See https://developers.google.com/storage/docs/reference-headers\n      for details.\n    read_buffer_size: The buffer size for read. Read keeps a buffer\n      and prefetches another one. To minimize blocking for large files,\n      always read by buffer size. To minimize number of RPC requests for\n      small files, set a large buffer size. Max is 30MB.\n    retry_params: An instance of api_utils.RetryParams for subsequent calls\n      to GCS from this file handle. If None, the default one is used.\n    _account_id: Internal-use only.\n\n  Returns:\n    A reading or writing buffer that supports File-like interface. Buffer\n    must be closed after operations are done.\n\n  Raises:\n    errors.AuthorizationError: if authorization failed.\n    errors.NotFoundError: if an object that's expected to exist doesn't.\n    ValueError: invalid open mode or if content_type or options are specified\n      in reading mode.\n  "),
               ('cloudstorage.cloudstorage_api.delete',
                ['filename', 'retry_params=None', '_account_id=None'],
                "Delete a Google Cloud Storage file.\n\n  Args:\n    filename: A Google Cloud Storage filename of form '/bucket/filename'.\n    retry_params: An api_utils.RetryParams for this call to GCS. If None,\n      the default one is used.\n    _account_id: Internal-use only.\n\n  Raises:\n    errors.NotFoundError: if the file doesn't exist prior to deletion.\n  "),
               ('cloudstorage.cloudstorage_api.stat',
                ['filename', 'retry_params=None', '_account_id=None'],
                "Get GCSFileStat of a Google Cloud storage file.\n\n  Args:\n    filename: A Google Cloud Storage filename of form '/bucket/filename'.\n    retry_params: An api_utils.RetryParams for this call to GCS. If None,\n      the default one is used.\n    _account_id: Internal-use only.\n\n  Returns:\n    a GCSFileStat object containing info about this file.\n\n  Raises:\n    errors.AuthorizationError: if authorization failed.\n    errors.NotFoundError: if an object that's expected to exist doesn't.\n  "),
               ('cloudstorage.cloudstorage_api._copy2',
                ['src', 'dst', 'metadata=None', 'retry_params=None'],
                "Copy the file content from src to dst.\n\n  Internal use only!\n\n  Args:\n    src: /bucket/filename\n    dst: /bucket/filename\n    metadata: a dict of metadata for this copy. If None, old metadata is copied.\n      For example, {'x-goog-meta-foo': 'bar'}.\n    retry_params: An api_utils.RetryParams for this call to GCS. If None,\n      the default one is used.\n\n  Raises:\n    errors.AuthorizationError: if authorization failed.\n    errors.NotFoundError: if an object that's expected to exist doesn't.\n  "),
               ('cloudstorage.cloudstorage_api.listbucket',
                ['path_prefix',
                 'marker=None',
                 'prefix=None',
                 'max_keys=None',
                 'delimiter=None',
                 'retry_params=None',
                 '_account_id=None'],
                'Returns a GCSFileStat iterator over a bucket.\n\n  Optional arguments can limit the result to a subset of files under bucket.\n\n  This function has two modes:\n  1. List bucket mode: Lists all files in the bucket without any concept of\n     hierarchy. GCS doesn\'t have real directory hierarchies.\n  2. Directory emulation mode: If you specify the \'delimiter\' argument,\n     it is used as a path separator to emulate a hierarchy of directories.\n     In this mode, the "path_prefix" argument should end in the delimiter\n     specified (thus designates a logical directory). The logical directory\'s\n     contents, both files and subdirectories, are listed. The names of\n     subdirectories returned will end with the delimiter. So listbucket\n     can be called with the subdirectory name to list the subdirectory\'s\n     contents.\n\n  Args:\n    path_prefix: A Google Cloud Storage path of format "/bucket" or\n      "/bucket/prefix". Only objects whose fullpath starts with the\n      path_prefix will be returned.\n    marker: Another path prefix. Only objects whose fullpath starts\n      lexicographically after marker will be returned (exclusive).\n    prefix: Deprecated. Use path_prefix.\n    max_keys: The limit on the number of objects to return. int.\n      For best performance, specify max_keys only if you know how many objects\n      you want. Otherwise, this method requests large batches and handles\n      pagination for you.\n    delimiter: Use to turn on directory mode. str of one or multiple chars\n      that your bucket uses as its directory separator.\n    retry_params: An api_utils.RetryParams for this call to GCS. If None,\n      the default one is used.\n    _account_id: Internal-use only.\n\n  Examples:\n    For files "/bucket/a",\n              "/bucket/bar/1"\n              "/bucket/foo",\n              "/bucket/foo/1", "/bucket/foo/2/1", "/bucket/foo/3/1",\n\n    Regular mode:\n    listbucket("/bucket/f", marker="/bucket/foo/1")\n    will match "/bucket/foo/2/1", "/bucket/foo/3/1".\n\n    Directory mode:\n    listbucket("/bucket/", delimiter="/")\n    will match "/bucket/a, "/bucket/bar/" "/bucket/foo", "/bucket/foo/".\n    listbucket("/bucket/foo/", delimiter="/")\n    will match "/bucket/foo/1", "/bucket/foo/2/", "/bucket/foo/3/"\n\n  Returns:\n    Regular mode:\n    A GCSFileStat iterator over matched files ordered by filename.\n    The iterator returns GCSFileStat objects. filename, etag, st_size,\n    st_ctime, and is_dir are set.\n\n    Directory emulation mode:\n    A GCSFileStat iterator over matched files and directories ordered by\n    name. The iterator returns GCSFileStat objects. For directories,\n    only the filename and is_dir fields are set.\n\n    The last name yielded can be used as next call\'s marker.\n  '),
               ('cloudstorage.common.set_access_token',
                ['access_token'],
                "Set the shared access token to authenticate with Google Cloud Storage.\n\n  When set, the library will always attempt to communicate with the\n  real Google Cloud Storage with this token even when running on dev appserver.\n  Note the token could expire so it's up to you to renew it.\n\n  When absent, the library will automatically request and refresh a token\n  on appserver, or when on dev appserver, talk to a Google Cloud Storage\n  stub.\n\n  Args:\n    access_token: you can get one by run 'gsutil -d ls' and copy the\n      str after 'Bearer'.\n  "),
               ('cloudstorage.common.get_access_token', [], 'Returns the shared access token.'),
               ('cloudstorage.common.get_stored_content_length',
                ['headers'],
                'Return the content length (in bytes) of the object as stored in GCS.\n\n  x-goog-stored-content-length should always be present except when called via\n  the local dev_appserver. Therefore if it is not present we default to the\n  standard content-length header.\n\n  Args:\n    headers: a dict of headers from the http response.\n\n  Returns:\n    the stored content length.\n  '),
               ('cloudstorage.common.get_metadata',
                ['headers'],
                'Get user defined options from HTTP response headers.'),
               ('cloudstorage.common.validate_bucket_name',
                ['name'],
                'Validate a Google Storage bucket name.\n\n  Args:\n    name: a Google Storage bucket name with no prefix or suffix.\n\n  Raises:\n    ValueError: if name is invalid.\n  '),
               ('cloudstorage.common.validate_bucket_path',
                ['path'],
                "Validate a Google Cloud Storage bucket path.\n\n  Args:\n    path: a Google Storage bucket path. It should have form '/bucket'.\n\n  Raises:\n    ValueError: if path is invalid.\n  "),
               ('cloudstorage.common.validate_file_path',
                ['path'],
                "Validate a Google Cloud Storage file path.\n\n  Args:\n    path: a Google Storage file path. It should have form '/bucket/filename'.\n\n  Raises:\n    ValueError: if path is invalid.\n  "),
               ('cloudstorage.common._process_path_prefix',
                ['path_prefix'],
                "Validate and process a Google Cloud Stoarge path prefix.\n\n  Args:\n    path_prefix: a Google Cloud Storage path prefix of format '/bucket/prefix'\n      or '/bucket/' or '/bucket'.\n\n  Raises:\n    ValueError: if path is invalid.\n\n  Returns:\n    a tuple of /bucket and prefix. prefix can be None.\n  "),
               ('cloudstorage.common._validate_path',
                ['path'],
                "Basic validation of Google Storage paths.\n\n  Args:\n    path: a Google Storage path. It should have form '/bucket/filename'\n      or '/bucket'.\n\n  Raises:\n    ValueError: if path is invalid.\n    TypeError: if path is not of type basestring.\n  "),
               ('cloudstorage.common.validate_options',
                ['options'],
                'Validate Google Cloud Storage options.\n\n  Args:\n    options: a str->basestring dict of options to pass to Google Cloud Storage.\n\n  Raises:\n    ValueError: if option is not supported.\n    TypeError: if option is not of type str or value of an option\n      is not of type basestring.\n  '),
               ('cloudstorage.common.http_time_to_posix',
                ['http_time'],
                'Convert HTTP time format to posix time.\n\n  See http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n  for http time format.\n\n  Args:\n    http_time: time in RFC 2616 format. e.g.\n      "Mon, 20 Nov 1995 19:12:08 GMT".\n\n  Returns:\n    A float of secs from unix epoch.\n  '),
               ('cloudstorage.common.posix_time_to_http',
                ['posix_time'],
                'Convert posix time to HTML header time format.\n\n  Args:\n    posix_time: unix time.\n\n  Returns:\n    A datatime str in RFC 2616 format.\n  '),
               ('cloudstorage.common.dt_str_to_posix',
                ['dt_str'],
                "format str to posix.\n\n  datetime str is of format %Y-%m-%dT%H:%M:%S.%fZ,\n  e.g. 2013-04-12T00:22:27.978Z. According to ISO 8601, T is a separator\n  between date and time when they are on the same line.\n  Z indicates UTC (zero meridian).\n\n  A pointer: http://www.cl.cam.ac.uk/~mgk25/iso-time.html\n\n  This is used to parse LastModified node from GCS's GET bucket XML response.\n\n  Args:\n    dt_str: A datetime str.\n\n  Returns:\n    A float of secs from unix epoch. By posix definition, epoch is midnight\n    1970/1/1 UTC.\n  "),
               ('cloudstorage.common.posix_to_dt_str',
                ['posix'],
                'Reverse of str_to_datetime.\n\n  This is used by GCS stub to generate GET bucket XML response.\n\n  Args:\n    posix: A float of secs from unix epoch.\n\n  Returns:\n    A datetime str.\n  '),
               ('cloudstorage.common.local_run',
                [],
                'Whether we should hit GCS dev appserver stub.'),
               ('cloudstorage.common.local_api_url',
                [],
                'Return URL for GCS emulation on dev appserver.'),
               ('cloudstorage.common.memory_usage',
                ['method'],
                'Log memory usage before and after a method.'),
               ('cloudstorage.common._add_ns', ['tagname'], ''),
               ('cloudstorage.errors.check_status',
                ['status',
                 'expected',
                 'path',
                 'headers=None',
                 'resp_headers=None',
                 'body=None',
                 'extras=None'],
                "Check HTTP response status is expected.\n\n  Args:\n    status: HTTP response status. int.\n    expected: a list of expected statuses. A list of ints.\n    path: filename or a path prefix.\n    headers: HTTP request headers.\n    resp_headers: HTTP response headers.\n    body: HTTP response body.\n    extras: extra info to be logged verbatim if error occurs.\n\n  Raises:\n    AuthorizationError: if authorization failed.\n    NotFoundError: if an object that's expected to exist doesn't.\n    TimeoutError: if HTTP request timed out.\n    ServerError: if server experienced some errors.\n    FatalError: if any other unexpected errors occurred.\n  "),
               ('cloudstorage.rest_api._make_sync_method',
                ['name'],
                "Helper to synthesize a synchronous method from an async method name.\n\n  Used by the @add_sync_methods class decorator below.\n\n  Args:\n    name: The name of the synchronous method.\n\n  Returns:\n    A method (with first argument 'self') that retrieves and calls\n    self.<name>, passing its own arguments, expects it to return a\n    Future, and then waits for and returns that Future's result.\n  "),
               ('cloudstorage.rest_api.add_sync_methods',
                ['cls'],
                'Class decorator to add synchronous methods corresponding to async methods.\n\n  This modifies the class in place, adding additional methods to it.\n  If a synchronous method of a given name already exists it is not\n  replaced.\n\n  Args:\n    cls: A class.\n\n  Returns:\n    The same class, modified in place.\n  '),
               ('cloudstorage.rest_api._make_token_async',
                ['scopes', 'service_account_id'],
                'Get a fresh authentication token.\n\n  Args:\n    scopes: A list of scopes.\n    service_account_id: Internal-use only.\n\n  Raises:\n    An ndb.Return with a tuple (token, expiration_time) where expiration_time is\n    seconds since the epoch.\n  '),
               ('cloudstorage.storage_api._get_storage_api',
                ['retry_params', 'account_id=None'],
                "Returns storage_api instance for API methods.\n\n  Args:\n    retry_params: An instance of api_utils.RetryParams. If none,\n     thread's default will be used.\n    account_id: Internal-use only.\n\n  Returns:\n    A storage_api instance to handle urlfetch work to GCS.\n    On dev appserver, this instance by default will talk to a local stub\n    unless common.ACCESS_TOKEN is set. That token will be used to talk\n    to the real GCS.\n  ")],
 'HIERARCHY': ['apns',
               'file_storage',
               'main',
               'push',
               'site_preview',
               'test',
               'uploads',
               'util',
               'bs4',
               'bs4.dammit',
               'bs4.diagnose',
               'bs4.element',
               'bs4.testing',
               'bs4.builder',
               'bs4.builder._html5lib',
               'bs4.builder._htmlparser',
               'bs4.builder._lxml',
               'bs4.tests',
               'bs4.tests.test_builder_registry',
               'bs4.tests.test_docs',
               'bs4.tests.test_html5lib',
               'bs4.tests.test_htmlparser',
               'bs4.tests.test_soup',
               'bs4.tests.test_tree',
               'cloudstorage',
               'cloudstorage.api_utils',
               'cloudstorage.cloudstorage_api',
               'cloudstorage.common',
               'cloudstorage.errors',
               'cloudstorage.rest_api',
               'cloudstorage.storage_api',
               'cloudstorage.test_utils'],
 'POINTERS': {'apns.AF_INET': 'socket.AF_INET',
              'apns.SOCK_STREAM': 'socket.SOCK_STREAM',
              'apns.SSLError': 'socket.sslerror',
              'apns.SSL_ERROR_WANT_READ': '_ssl.SSL_ERROR_WANT_READ',
              'apns.SSL_ERROR_WANT_WRITE': '_ssl.SSL_ERROR_WANT_WRITE',
              'apns.a2b_hex': 'binascii.a2b_hex',
              'apns.b2a_hex': 'binascii.b2a_hex',
              'apns.collections': 'collections',
              'apns.datetime': 'datetime.datetime',
              'apns.itertools': 'itertools',
              'apns.json': 'simplejson',
              'apns.logging': 'logging',
              'apns.pack': 'struct.pack',
              'apns.select': 'select',
              'apns.socket': 'socket.socket',
              'apns.socket_error': 'socket.error',
              'apns.ssl': 'ssl',
              'apns.sys': 'sys',
              'apns.threading': 'threading',
              'apns.time': 'time',
              'apns.timeout': 'socket.timeout',
              'apns.unpack': 'struct.unpack',
              'apns.wrap_socket': 'socket.ssl',
              'bs4.CData': 'bs4.element.CData',
              'bs4.Comment': 'bs4.element.Comment',
              'bs4.DEFAULT_OUTPUT_ENCODING': 'bs4.element.DEFAULT_OUTPUT_ENCODING',
              'bs4.Declaration': 'bs4.element.Declaration',
              'bs4.Doctype': 'bs4.element.Doctype',
              'bs4.NavigableString': 'bs4.element.NavigableString',
              'bs4.PageElement': 'bs4.element.PageElement',
              'bs4.ParserRejectedMarkup': 'bs4.builder.ParserRejectedMarkup',
              'bs4.ProcessingInstruction': 'bs4.element.ProcessingInstruction',
              'bs4.ResultSet': 'bs4.element.ResultSet',
              'bs4.SoupStrainer': 'bs4.element.SoupStrainer',
              'bs4.Tag': 'bs4.element.Tag',
              'bs4.UnicodeDammit': 'bs4.dammit.UnicodeDammit',
              'bs4.builder.CharsetMetaAttributeValue': 'bs4.element.CharsetMetaAttributeValue',
              'bs4.builder.ContentMetaAttributeValue': 'bs4.element.ContentMetaAttributeValue',
              'bs4.builder._html5lib': 'bs4.builder.._html5lib',
              'bs4.builder._html5lib.Comment': 'bs4.element.Comment',
              'bs4.builder._html5lib.Doctype': 'bs4.element.Doctype',
              'bs4.builder._html5lib.HTML': 'bs4.builder.HTML',
              'bs4.builder._html5lib.HTMLTreeBuilder': 'bs4.builder.HTMLTreeBuilder',
              'bs4.builder._html5lib.HTML_5': 'bs4.builder.HTML_5',
              'bs4.builder._html5lib.NamespacedAttribute': 'bs4.element.NamespacedAttribute',
              'bs4.builder._html5lib.NavigableString': 'bs4.element.NavigableString',
              'bs4.builder._html5lib.PERMISSIVE': 'bs4.builder.PERMISSIVE',
              'bs4.builder._html5lib.Tag': 'bs4.element.Tag',
              'bs4.builder._html5lib.html5lib': 'html5lib',
              'bs4.builder._html5lib.namespaces': 'html5lib.constants.namespaces',
              'bs4.builder._html5lib.set_trace': 'pdb.set_trace',
              'bs4.builder._html5lib.warnings': 'warnings',
              'bs4.builder._html5lib.whitespace_re': 'bs4.element.whitespace_re',
              'bs4.builder._htmlparser': 'bs4.builder.._htmlparser',
              'bs4.builder._htmlparser.CData': 'bs4.element.CData',
              'bs4.builder._htmlparser.Comment': 'bs4.element.Comment',
              'bs4.builder._htmlparser.Declaration': 'bs4.element.Declaration',
              'bs4.builder._htmlparser.Doctype': 'bs4.element.Doctype',
              'bs4.builder._htmlparser.EntitySubstitution': 'bs4.dammit.EntitySubstitution',
              'bs4.builder._htmlparser.HTML': 'bs4.builder.HTML',
              'bs4.builder._htmlparser.HTMLParseError': 'HTMLParser.HTMLParseError',
              'bs4.builder._htmlparser.HTMLParser': 'HTMLParser.HTMLParser',
              'bs4.builder._htmlparser.HTMLTreeBuilder': 'bs4.builder.HTMLTreeBuilder',
              'bs4.builder._htmlparser.ProcessingInstruction': 'bs4.element.ProcessingInstruction',
              'bs4.builder._htmlparser.STRICT': 'bs4.builder.STRICT',
              'bs4.builder._htmlparser.UnicodeDammit': 'bs4.dammit.UnicodeDammit',
              'bs4.builder._htmlparser.attrfind': 'html.parser.attrfind',
              'bs4.builder._htmlparser.re': 're',
              'bs4.builder._htmlparser.sys': 'sys',
              'bs4.builder._htmlparser.tagfind': 'html.parser.tagfind',
              'bs4.builder._htmlparser.warnings': 'warnings',
              'bs4.builder._lxml': 'bs4.builder.._lxml',
              'bs4.builder._lxml.BytesIO': 'io.BytesIO',
              'bs4.builder._lxml.Comment': 'bs4.element.Comment',
              'bs4.builder._lxml.Doctype': 'bs4.element.Doctype',
              'bs4.builder._lxml.EncodingDetector': 'bs4.dammit.EncodingDetector',
              'bs4.builder._lxml.FAST': 'bs4.builder.FAST',
              'bs4.builder._lxml.HTML': 'bs4.builder.HTML',
              'bs4.builder._lxml.HTMLTreeBuilder': 'bs4.builder.HTMLTreeBuilder',
              'bs4.builder._lxml.NamespacedAttribute': 'bs4.element.NamespacedAttribute',
              'bs4.builder._lxml.PERMISSIVE': 'bs4.builder.PERMISSIVE',
              'bs4.builder._lxml.ParserRejectedMarkup': 'bs4.builder.ParserRejectedMarkup',
              'bs4.builder._lxml.ProcessingInstruction': 'bs4.element.ProcessingInstruction',
              'bs4.builder._lxml.StringIO': 'StringIO.StringIO',
              'bs4.builder._lxml.TreeBuilder': 'bs4.builder.TreeBuilder',
              'bs4.builder._lxml.XML': 'bs4.builder.XML',
              'bs4.builder._lxml.collections': 'collections',
              'bs4.builder._lxml.etree': 'lxml.etree',
              'bs4.builder.defaultdict': 'collections.defaultdict',
              'bs4.builder.itertools': 'itertools',
              'bs4.builder.sys': 'sys',
              'bs4.builder.whitespace_re': 'bs4.element.whitespace_re',
              'bs4.builder_registry': 'bs4.builder.builder_registry',
              'bs4.dammit.cchardet': 'cchardet',
              'bs4.dammit.chardet': 'chardet',
              'bs4.dammit.codecs': 'codecs',
              'bs4.dammit.codepoint2name': 'htmlentitydefs.codepoint2name',
              'bs4.dammit.iconv_codec': 'iconv_codec',
              'bs4.dammit.logging': 'logging',
              'bs4.dammit.re': 're',
              'bs4.dammit.set_trace': 'pdb.set_trace',
              'bs4.dammit.string': 'string',
              'bs4.diagnose.BeautifulSoup': 'bs4.BeautifulSoup',
              'bs4.diagnose.HTMLParser': 'HTMLParser.HTMLParser',
              'bs4.diagnose.StringIO': 'StringIO.StringIO',
              'bs4.diagnose.__version__': 'bs4.__version__',
              'bs4.diagnose.bs4': 'bs4',
              'bs4.diagnose.builder_registry': 'bs4.builder.builder_registry',
              'bs4.diagnose.cProfile': 'cProfile',
              'bs4.diagnose.etree': 'lxml.etree',
              'bs4.diagnose.html5lib': 'html5lib',
              'bs4.diagnose.os': 'os',
              'bs4.diagnose.pstats': 'pstats',
              'bs4.diagnose.random': 'random',
              'bs4.diagnose.sys': 'sys',
              'bs4.diagnose.tempfile': 'tempfile',
              'bs4.diagnose.time': 'time',
              'bs4.diagnose.traceback': 'traceback',
              'bs4.element.EntitySubstitution': 'bs4.dammit.EntitySubstitution',
              'bs4.element.collections': 'collections',
              'bs4.element.re': 're',
              'bs4.element.set_trace': 'pdb.set_trace',
              'bs4.element.sys': 'sys',
              'bs4.element.warnings': 'warnings',
              'bs4.os': 'os',
              'bs4.re': 're',
              'bs4.sys': 'sys',
              'bs4.testing.BeautifulSoup': 'bs4.BeautifulSoup',
              'bs4.testing.CharsetMetaAttributeValue': 'bs4.element.CharsetMetaAttributeValue',
              'bs4.testing.Comment': 'bs4.element.Comment',
              'bs4.testing.ContentMetaAttributeValue': 'bs4.element.ContentMetaAttributeValue',
              'bs4.testing.Doctype': 'bs4.element.Doctype',
              'bs4.testing.HTMLParserTreeBuilder': 'bs4.builder.HTMLParserTreeBuilder',
              'bs4.testing.SoupStrainer': 'bs4.element.SoupStrainer',
              'bs4.testing.TestCase': 'unittest.TestCase',
              'bs4.testing.copy': 'copy',
              'bs4.testing.functools': 'functools',
              'bs4.testing.pickle': 'pickle',
              'bs4.testing.unittest': 'unittest',
              'bs4.tests.test_builder_registry.BeautifulSoup': 'bs4.BeautifulSoup',
              'bs4.tests.test_builder_registry.HTML5TreeBuilder': 'bs4.builder.HTML5TreeBuilder',
              'bs4.tests.test_builder_registry.HTMLParserTreeBuilder': 'bs4.builder.HTMLParserTreeBuilder',
              'bs4.tests.test_builder_registry.LXMLTreeBuilder': 'bs4.builder.LXMLTreeBuilder',
              'bs4.tests.test_builder_registry.LXMLTreeBuilderForXML': 'bs4.builder.LXMLTreeBuilderForXML',
              'bs4.tests.test_builder_registry.TreeBuilderRegistry': 'bs4.builder.TreeBuilderRegistry',
              'bs4.tests.test_builder_registry.registry': 'bs4.builder.builder_registry',
              'bs4.tests.test_builder_registry.unittest': 'unittest',
              'bs4.tests.test_builder_registry.warnings': 'warnings',
              'bs4.tests.test_docs.atexit': 'atexit',
              'bs4.tests.test_docs.doctest': 'doctest',
              'bs4.tests.test_docs.os': 'os',
              'bs4.tests.test_docs.unittest': 'unittest',
              'bs4.tests.test_html5lib.HTML5TreeBuilder': 'bs4.builder.HTML5TreeBuilder',
              'bs4.tests.test_html5lib.HTML5TreeBuilderSmokeTest': 'bs4.testing.HTML5TreeBuilderSmokeTest',
              'bs4.tests.test_html5lib.SoupStrainer': 'bs4.element.SoupStrainer',
              'bs4.tests.test_html5lib.SoupTest': 'bs4.testing.SoupTest',
              'bs4.tests.test_html5lib.skipIf': 'bs4.testing.skipIf',
              'bs4.tests.test_html5lib.warnings': 'warnings',
              'bs4.tests.test_htmlparser.HTMLParserTreeBuilder': 'bs4.builder.HTMLParserTreeBuilder',
              'bs4.tests.test_htmlparser.HTMLTreeBuilderSmokeTest': 'bs4.testing.HTMLTreeBuilderSmokeTest',
              'bs4.tests.test_htmlparser.SoupTest': 'bs4.testing.SoupTest',
              'bs4.tests.test_htmlparser.pickle': 'pickle',
              'bs4.tests.test_htmlparser.set_trace': 'pdb.set_trace',
              'bs4.tests.test_soup.BeautifulSoup': 'bs4.BeautifulSoup',
              'bs4.tests.test_soup.BeautifulStoneSoup': 'bs4.BeautifulStoneSoup',
              'bs4.tests.test_soup.CharsetMetaAttributeValue': 'bs4.element.CharsetMetaAttributeValue',
              'bs4.tests.test_soup.ContentMetaAttributeValue': 'bs4.element.ContentMetaAttributeValue',
              'bs4.tests.test_soup.EncodingDetector': 'bs4.dammit.EncodingDetector',
              'bs4.tests.test_soup.EntitySubstitution': 'bs4.dammit.EntitySubstitution',
              'bs4.tests.test_soup.LXMLTreeBuilder': 'bs4.builder.LXMLTreeBuilder',
              'bs4.tests.test_soup.LXMLTreeBuilderForXML': 'bs4.builder.LXMLTreeBuilderForXML',
              'bs4.tests.test_soup.NamespacedAttribute': 'bs4.element.NamespacedAttribute',
              'bs4.tests.test_soup.SoupStrainer': 'bs4.element.SoupStrainer',
              'bs4.tests.test_soup.SoupTest': 'bs4.testing.SoupTest',
              'bs4.tests.test_soup.UnicodeDammit': 'bs4.dammit.UnicodeDammit',
              'bs4.tests.test_soup.bs4.dammit': 'bs4.dammit',
              'bs4.tests.test_soup.logging': 'logging',
              'bs4.tests.test_soup.set_trace': 'pdb.set_trace',
              'bs4.tests.test_soup.skipIf': 'bs4.testing.skipIf',
              'bs4.tests.test_soup.sys': 'sys',
              'bs4.tests.test_soup.tempfile': 'tempfile',
              'bs4.tests.test_soup.unittest': 'unittest',
              'bs4.tests.test_soup.warnings': 'warnings',
              'bs4.tests.test_tree.BeautifulSoup': 'bs4.BeautifulSoup',
              'bs4.tests.test_tree.CData': 'bs4.element.CData',
              'bs4.tests.test_tree.Comment': 'bs4.element.Comment',
              'bs4.tests.test_tree.Declaration': 'bs4.element.Declaration',
              'bs4.tests.test_tree.Doctype': 'bs4.element.Doctype',
              'bs4.tests.test_tree.HTMLParserTreeBuilder': 'bs4.builder.HTMLParserTreeBuilder',
              'bs4.tests.test_tree.NavigableString': 'bs4.element.NavigableString',
              'bs4.tests.test_tree.PY3K': 'bs4.element.PY3K',
              'bs4.tests.test_tree.SoupStrainer': 'bs4.element.SoupStrainer',
              'bs4.tests.test_tree.SoupTest': 'bs4.testing.SoupTest',
              'bs4.tests.test_tree.Tag': 'bs4.element.Tag',
              'bs4.tests.test_tree.builder_registry': 'bs4.builder.builder_registry',
              'bs4.tests.test_tree.copy': 'copy',
              'bs4.tests.test_tree.pickle': 'pickle',
              'bs4.tests.test_tree.re': 're',
              'bs4.tests.test_tree.set_trace': 'pdb.set_trace',
              'bs4.tests.test_tree.skipIf': 'bs4.testing.skipIf',
              'bs4.tests.test_tree.warnings': 'warnings',
              'bs4.warnings': 'warnings',
              'cloudstorage.*': 'cloudstorage.storage_api.*',
              'cloudstorage.CSFileStat': 'cloudstorage.common.CSFileStat',
              'cloudstorage.GCSFileStat': 'cloudstorage.common.GCSFileStat',
              'cloudstorage.RetryParams': 'cloudstorage.api_utils.RetryParams',
              'cloudstorage.api_utils.apiproxy_errors': 'google.appengine.runtime.apiproxy_errors',
              'cloudstorage.api_utils.app_identity': 'google.appengine.api.app_identity',
              'cloudstorage.api_utils.copy': 'copy',
              'cloudstorage.api_utils.datastore_rpc': 'google.appengine.datastore.datastore_rpc',
              'cloudstorage.api_utils.eventloop': 'google.appengine.ext.ndb.eventloop',
              'cloudstorage.api_utils.httplib': 'httplib',
              'cloudstorage.api_utils.logging': 'logging',
              'cloudstorage.api_utils.math': 'math',
              'cloudstorage.api_utils.ndb': 'google.appengine.ext.ndb',
              'cloudstorage.api_utils.os': 'os',
              'cloudstorage.api_utils.runtime': 'google.appengine.runtime',
              'cloudstorage.api_utils.tasklets': 'google.appengine.ext.ndb.tasklets',
              'cloudstorage.api_utils.threading': 'threading',
              'cloudstorage.api_utils.time': 'time',
              'cloudstorage.api_utils.urlfetch': 'google.appengine.api.urlfetch',
              'cloudstorage.api_utils.urllib': 'urllib',
              'cloudstorage.api_utils.utils': 'google.appengine.ext.ndb.utils',
              'cloudstorage.cloudstorage_api.ET': 'xml.etree.cElementTree',
              'cloudstorage.cloudstorage_api.StringIO': 'StringIO',
              'cloudstorage.cloudstorage_api.api_utils': 'cloudstorage..api_utils',
              'cloudstorage.cloudstorage_api.common': 'cloudstorage..common',
              'cloudstorage.cloudstorage_api.errors': 'cloudstorage..errors',
              'cloudstorage.cloudstorage_api.logging': 'logging',
              'cloudstorage.cloudstorage_api.storage_api': 'cloudstorage..storage_api',
              'cloudstorage.cloudstorage_api.urllib': 'urllib',
              'cloudstorage.cloudstorage_api.with_statement': '__future__.with_statement',
              'cloudstorage.common.calendar': 'calendar',
              'cloudstorage.common.datetime': 'datetime',
              'cloudstorage.common.email_utils': 'email.utils',
              'cloudstorage.common.logging': 'logging',
              'cloudstorage.common.os': 'os',
              'cloudstorage.common.re': 're',
              'cloudstorage.common.runtime': 'google.appengine.api.runtime',
              'cloudstorage.errors.httplib': 'httplib',
              'cloudstorage.rest_api.api_utils': 'cloudstorage..api_utils',
              'cloudstorage.rest_api.app_identity': 'google.appengine.api.app_identity',
              'cloudstorage.rest_api.ndb': 'google.appengine.ext.ndb',
              'cloudstorage.rest_api.random': 'random',
              'cloudstorage.rest_api.time': 'time',
              'cloudstorage.set_default_retry_params': 'cloudstorage.api_utils.set_default_retry_params',
              'cloudstorage.storage_api.api_utils': 'cloudstorage..api_utils',
              'cloudstorage.storage_api.collections': 'collections',
              'cloudstorage.storage_api.common': 'cloudstorage..common',
              'cloudstorage.storage_api.errors': 'cloudstorage..errors',
              'cloudstorage.storage_api.ndb': 'google.appengine.ext.ndb',
              'cloudstorage.storage_api.os': 'os',
              'cloudstorage.storage_api.rest_api': 'cloudstorage..rest_api',
              'cloudstorage.storage_api.urlfetch': 'google.appengine.api.urlfetch',
              'cloudstorage.storage_api.urlparse': 'urlparse',
              'cloudstorage.validate_bucket_name': 'cloudstorage.common.validate_bucket_name',
              'cloudstorage.validate_bucket_path': 'cloudstorage.common.validate_bucket_path',
              'cloudstorage.validate_file_path': 'cloudstorage.common.validate_file_path',
              'file_storage.app_identity': 'google.appengine.api.app_identity',
              'file_storage.gcs': 'cloudstorage',
              'file_storage.os': 'os',
              'file_storage.uuid': 'uuid',
              'main.json': 'json',
              'main.push': 'push',
              'main.site_preview': 'site_preview',
              'main.uploads': 'uploads',
              'main.webapp2': 'webapp2',
              'push.APNs': 'apns.APNs',
              'push.Frame': 'apns.Frame',
              'push.Payload': 'apns.Payload',
              'push.json': 'json',
              'push.time': 'time',
              'push.urllib': 'urllib',
              'push.urllib2': 'urllib2',
              'push.webapp2': 'webapp2',
              'site_preview.bs4': 'bs4',
              'site_preview.json': 'json',
              'site_preview.urllib2': 'urllib2',
              'site_preview.webapp2': 'webapp2',
              'test.APNs': 'apns.APNs',
              'test.Frame': 'apns.Frame',
              'test.Payload': 'apns.Payload',
              'test.json': 'json',
              'test.time': 'time',
              'test.urllib': 'urllib',
              'test.urllib2': 'urllib2',
              'uploads.images': 'google.appengine.api.images',
              'uploads.json': 'json',
              'uploads.upload_file_and_get_url': 'file_storage.upload_file_and_get_url',
              'uploads.urllib2': 'urllib2',
              'uploads.webapp2': 'webapp2',
              'util.CookieJar': 'cookielib.CookieJar',
              'util.HTTPException': 'httplib.HTTPException',
              'util.calendar': 'calendar',
              'util.logging': 'logging',
              'util.ndb': 'google.appengine.ext.ndb',
              'util.re': 're',
              'util.unicodedata': 'unicodedata',
              'util.urlfetch': 'google.appengine.api.urlfetch',
              'util.urllib2': 'urllib2'}}
